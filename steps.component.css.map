{
  "version": 3,
  "sources": ["src/app/routes/main/components/steps/steps.component.scss", "node_modules/bootstrap/scss/mixins/_breakpoints.scss"],
  "sourcesContent": ["@import 'bootstrap/scss/functions';\n@import 'bootstrap/scss/variables';\n@import 'bootstrap/scss/mixins/_breakpoints';\n\n.links {\n  // Tree container\n  height: 50px;\n\n  // One width segment of the tree\n  .connect {\n    position: relative;\n\n    height: 100vh;\n    margin-left: 16px;\n\n    // Segment contains trail\n    &.last,\n    &.trail {\n      border-left: 2px dotted var(--text-color-secondary);\n    }\n\n    // Segment ends at this row\n    &.last:not(.trail) {\n      margin-bottom: 50vh;\n      height: 50vh;\n    }\n\n    // Segments should pad between\n    & + .connect {\n      margin-left: 24px;\n    }\n\n    @include media-breakpoint-down(xl) {\n      margin-left: 8px;\n\n      + .connect {\n        margin-left: 16px;\n      }\n    }\n  }\n\n  .indent {\n    margin-left: 0;\n    border-top: 2px dotted var(--text-color-secondary);\n    width: 8px;\n  }\n\n  .icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    width: 32px;\n    height: 32px;\n  }\n}\n\n:host ::ng-deep {\n  // Mask input fields\n  .p-dropdown,\n  .p-inputtext {\n    &:not(:hover):not(:focus):not(.ng-invalid) {\n      border-color: transparent;\n\n      background-color: transparent;\n    }\n  }\n\n  // Highlight modules to right of the hovered module\n  .module-dropdown:not(.last) {\n    margin-right: -0.5rem;\n\n    .p-dropdown {\n      border-right-color: transparent;\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  }\n\n  .module-dropdown:hover ~ .module-dropdown {\n    .lab-icon.sm {\n      opacity: 0.3;\n    }\n\n    &:not(.last) .p-dropdown {\n      border-top-color: var(--primary-color);\n      border-bottom-color: var(--primary-color);\n    }\n\n    &.last .p-dropdown {\n      border-color: var(--primary-color);\n      border-left-color: transparent;\n    }\n  }\n}\n\ntr.detail {\n  background-color: var(--surface-ground);\n}\n\n:host\n  ::ng-deep\n  tr.detail\n  .p-tabmenu\n  .p-tabmenu-nav\n  .p-tabmenuitem:not(.p-highlight)\n  .p-menuitem-link {\n  background-color: transparent;\n}\n\n.icon-height {\n  min-height: 32px;\n}\n\n.modules-column {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin: auto;\n}\n\n.fragment {\n  position: absolute;\n  top: -10rem;\n\n  visibility: hidden;\n}\n\n.column-header-row > th {\n  height: 48px;\n}\n", "// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],
  "mappings": ";AAIA,CAAA;AAEE,UAAA;;AAGA,CALF,MAKE,CAAA;AACE,YAAA;AAEA,UAAA;AACA,eAAA;;AAGA,CAZJ,MAYI,CAPF,OAOE,CAAA;AAAA,CAZJ,MAYI,CAPF,OAOE,CAAA;AAEE,eAAA,IAAA,OAAA,IAAA;;AAIF,CAlBJ,MAkBI,CAbF,OAaE,CANA,IAMA,KAAA,CANA;AAOE,iBAAA;AACA,UAAA;;AAIF,CAxBJ,MAwBI,CAnBF,QAmBE,EAAA,CAnBF;AAoBI,eAAA;;AC+CF,OAAA,CAAA,SAAA,EAAA;ADnEF,GALF,MAKE,CAAA;AAwBI,iBAAA;;AAEA,GA/BN,MA+BM,CA1BJ,QA0BI,EAAA,CA1BJ;AA2BM,iBAAA;;;AAKN,CArCF,MAqCE,CAAA;AACE,eAAA;AACA,cAAA,IAAA,OAAA,IAAA;AACA,SAAA;;AAGF,CA3CF,MA2CE,CAAA;AACE,WAAA;AACA,eAAA;AACA,mBAAA;AAEA,SAAA;AACA,UAAA;;AAQA,MAAA,UAAA,CAAA,UAAA,KAAA,OAAA,KAAA,OAAA,KAAA,CAAA;AAAA,MAAA,UAAA,CAAA,WAAA,KAAA,OAAA,KAAA,OAAA,KAAA,CAAA;AACE,gBAAA;AAEA,oBAAA;;AAKJ,MAAA,UAAA,CAAA,eAAA,KAAA,CArDE;AAsDA,gBAAA;;AAEA,MAAA,UAAA,CAHF,eAGE,KAAA,CAxDA,MAwDA,CAXA;AAYE,sBAAA;AACA,2BAAA;AACA,8BAAA;;AAKF,MAAA,UAAA,CAXF,eAWE,OAAA,EAAA,CAXF,gBAWE,CAAA,QAAA,CAAA;AACE,WAAA;;AAGF,MAAA,UAAA,CAfF,eAeE,OAAA,EAAA,CAfF,eAeE,KAAA,CApEA,MAoEA,CAvBA;AAwBE,oBAAA,IAAA;AACA,uBAAA,IAAA;;AAGF,MAAA,UAAA,CApBF,eAoBE,OAAA,EAAA,CApBF,eAoBE,CAzEA,KAyEA,CA5BA;AA6BE,gBAAA,IAAA;AACA,qBAAA;;AAKN,EAAA,CAAA;AACE,oBAAA,IAAA;;AAGF,MAAA,UAAA,EAAA,CAJA,OAIA,CAAA,UAAA,CAAA,cAAA,CAAA,aAAA,KAAA,CAAA,aAAA,CAAA;AAOE,oBAAA;;AAGF,CAAA;AACE,cAAA;;AAGF,CAAA;AACE,WAAA;AACA,yBAAA,IAAA;AACA,UAAA;;AAGF,CAAA;AACE,YAAA;AACA,OAAA;AAEA,cAAA;;AAGF,CAAA,kBAAA,EAAA;AACE,UAAA;;",
  "names": []
}
