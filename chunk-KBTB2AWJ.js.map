{
  "version": 3,
  "sources": ["src/app/routes/main/pipes/as-step.pipe.ts", "src/app/routes/main/pipes/filter-options.pipe.ts", "src/app/routes/main/pipes/inserter-speed.pipe.ts", "src/app/routes/main/pipes/left-pad.pipe.ts", "src/app/routes/main/pipes/rate.pipe.ts", "src/app/routes/main/pipes/machine-rate.pipe.ts", "src/app/routes/main/pipes/machine-show-rate.pipe.ts", "src/app/routes/main/pipes/machine-show.pipe.ts", "src/app/routes/main/pipes/options.pipe.ts", "src/app/routes/main/pipes/power.pipe.ts", "src/app/routes/main/pipes/step-href.pipe.ts", "src/app/routes/main/pipes/step-id.pipe.ts", "src/app/routes/main/directives/dropdown-base.directive.ts", "src/app/routes/main/components/modules/modules.component.ts", "src/app/routes/main/components/modules/modules.component.html", "src/app/routes/main/components/beacons-overlay/beacons-overlay.component.ts", "src/app/routes/main/components/beacons-overlay/beacons-overlay.component.html", "src/app/routes/main/components/modules-overlay/modules-overlay.component.ts", "src/app/routes/main/components/modules-overlay/modules-overlay.component.html", "src/app/routes/main/directives/no-drag.directive.ts", "src/app/routes/main/components/steps/steps.component.ts", "src/app/routes/main/components/steps/steps.component.html", "src/app/routes/main/components/objectives/objectives.component.ts", "src/app/routes/main/components/objectives/objectives.component.html", "src/app/routes/main/components/tech-picker/tech-picker.component.ts", "src/app/routes/main/components/tech-picker/tech-picker.component.html", "src/app/routes/main/components/settings/settings.component.ts", "src/app/routes/main/components/settings/settings.component.html", "src/app/routes/main/main-shared.module.ts"],
  "sourcesContent": ["import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Step } from '~/models';\n\n/**\n * Does not do any actual checking, mainly used to restore typing inside\n * templates which cast to `any`\n */\n@Pipe({ name: 'asStep' })\nexport class AsStepPipe implements PipeTransform {\n  transform(value: unknown): Step {\n    return value as Step;\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectItem } from 'primeng/api';\n\n@Pipe({ name: 'filterOptions' })\nexport class FilterOptionsPipe implements PipeTransform {\n  transform(\n    value: SelectItem[] | null | undefined,\n    exclude: string[] | null | undefined,\n    self?: string | null,\n  ): SelectItem[] {\n    if (value == null) return [];\n    if (!exclude?.length) return value;\n\n    const excludeSet = new Set(exclude);\n    return value.filter((o) => !excludeSet.has(o.value) || o.value === self);\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { InserterData, InserterSpeed, ItemId, Rational } from '~/models';\nimport { Settings } from '~/store';\n\n@Pipe({ name: 'inserterSpeed' })\nexport class InserterSpeedPipe implements PipeTransform {\n  transform(\n    value: Rational | undefined,\n    settings: Settings.SettingsState,\n  ): InserterSpeed | null {\n    if (value != null) {\n      const inserter = InserterData[settings.inserterTarget][\n        settings.inserterCapacity\n      ]?.find((d) => d.value.gt(value) || d.id === ItemId.StackInserter);\n\n      if (inserter == null) {\n        // Should be impossible due to stack inserter fallback\n        return null;\n      }\n\n      return {\n        id: inserter.id,\n        value: value.div(inserter.value),\n      };\n    }\n    return null;\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'leftPad' })\nexport class LeftPadPipe implements PipeTransform {\n  transform(value: string | undefined): string {\n    if (value == null) return '';\n\n    return ' '.repeat(4 - value.length) + value;\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Rational, rational } from '~/models';\n\n@Pipe({ name: 'rate' })\nexport class RatePipe implements PipeTransform {\n  static transform(value: Rational, precision: number | null): string {\n    if (precision == null) return value.toFraction();\n\n    if (precision === -2) {\n      const num = Math.round(value.mul(rational(100n)).toNumber());\n      return num.toString();\n    }\n\n    const num = value.toPrecision(precision);\n    let result = num.toString();\n    if (precision > 0) {\n      /**\n       * Check whether value is lower than minimum rounded-up value, and prepend\n       * < if so. E.G. if value is 0.001 and rounding to one digit, display <0.1\n       */\n      const compare = rational(1, Math.pow(10, precision));\n      if (value.gt(rational(0n)) && value.lt(compare)) result = `<${result}`;\n\n      const split = result.split('.');\n      if (split.length > 1) {\n        if (split[1].length < precision) {\n          const spaces = precision - split[1].length;\n          return result + '0'.repeat(spaces);\n        }\n      } else if (value.isInteger()) {\n        return result + ' '.repeat(precision + 1);\n      } else {\n        return result + '.' + '0'.repeat(precision);\n      }\n    }\n\n    return result;\n  }\n\n  transform(value: Rational, precision: number | null): string {\n    return RatePipe.transform(value, precision);\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { ItemId, Rational, rational } from '~/models';\nimport { RatePipe } from './rate.pipe';\n\n@Pipe({ name: 'machineRate' })\nexport class MachineRatePipe implements PipeTransform {\n  transform(\n    value: Rational,\n    precision: number | null,\n    machineId: string,\n  ): string {\n    if (machineId === ItemId.Pumpjack) {\n      return `${RatePipe.transform(\n        value.mul(rational(100n)),\n        precision != null ? Math.max(precision - 2, 0) : precision,\n      )}%`;\n    } else {\n      return RatePipe.transform(value, precision);\n    }\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Game, ItemId } from '~/models';\n\n@Pipe({ name: 'machineShowRate' })\nexport class MachineShowRatePipe implements PipeTransform {\n  transform(machineId: string, game: Game): boolean {\n    return (\n      game !== Game.CaptainOfIndustry || machineId !== ItemId.MineControlTower\n    );\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Game, ItemId } from '~/models';\n\n@Pipe({ name: 'machineShow' })\nexport class MachineShowPipe implements PipeTransform {\n  transform(machineId: string | null | undefined, game: Game): boolean {\n    if (machineId == null) return false;\n\n    return (\n      game !== Game.DysonSphereProgram || machineId !== ItemId.MiningMachine\n    );\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectItem } from 'primeng/api';\n\nimport { Entities, ItemId } from '~/models';\n\n@Pipe({ name: 'options' })\nexport class OptionsPipe implements PipeTransform {\n  transform(\n    value: string[] | null | undefined,\n    entities: Entities<{ name: string }>,\n    includeEmptyModule = false,\n  ): SelectItem[] {\n    if (value == null) {\n      return [];\n    }\n\n    const list = value.map(\n      (i): SelectItem => ({ label: entities[i].name, value: i }),\n    );\n\n    if (includeEmptyModule) {\n      list.unshift({ label: 'None', value: ItemId.Module });\n    }\n\n    return list;\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { PowerUnit, Rational, rational } from '~/models';\nimport { RatePipe } from './rate.pipe';\n\n@Pipe({ name: 'power' })\nexport class PowerPipe implements PipeTransform {\n  transform(\n    value: Rational,\n    precision: number | null,\n    unit?: PowerUnit,\n  ): string {\n    switch (unit) {\n      case PowerUnit.GW:\n        return `${RatePipe.transform(\n          value.div(rational(1000000n)),\n          precision,\n        )} GW`;\n      case PowerUnit.MW:\n        return `${RatePipe.transform(\n          value.div(rational(1000n)),\n          precision,\n        )} MW`;\n      default:\n        return `${RatePipe.transform(value, precision)} kW`;\n    }\n  }\n}\n", "import { inject, Pipe, PipeTransform } from '@angular/core';\n\nimport { AdjustedDataset, Step } from '~/models';\nimport { RouterService, Zip } from '~/services';\n\n@Pipe({ name: 'stepHref' })\nexport class StepHrefPipe implements PipeTransform {\n  routerSvc = inject(RouterService);\n\n  transform(\n    value: Step,\n    zipPartial: Zip,\n    data: AdjustedDataset,\n  ): string | null {\n    let step = value;\n    if (step.recipeId) {\n      const recipe = data.adjustedRecipe[step.recipeId];\n      if (recipe.isTechnology && recipe.productivity && value.items) {\n        // Adjust items to account for productivity bonus\n        step = {\n          ...value,\n          ...{ items: value.items.div(recipe.productivity) },\n        };\n      }\n    }\n    return this.routerSvc.stepHref(step, zipPartial, data.hash);\n  }\n}\n", "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Step } from '~/models';\n\n@Pipe({ name: 'stepId' })\nexport class StepIdPipe implements PipeTransform {\n  static transform(value: Step): string {\n    return (\n      value.itemId ?? value.recipeObjectiveId ?? value.recipeId ?? value.id\n    );\n  }\n\n  transform(value: Step): string {\n    return StepIdPipe.transform(value);\n  }\n}\n", "import { Directive, effect, inject, input, OnInit } from '@angular/core';\nimport { Dropdown } from 'primeng/dropdown';\n\nimport { ContentService } from '~/services';\n\n@Directive({\n  selector: '[labDropdownBase]',\n})\nexport class DropdownBaseDirective implements OnInit {\n  contentSvc = inject(ContentService);\n  pDropdown = inject(Dropdown, { self: true });\n\n  labDropdownBase = input<'icon' | ''>();\n  setAutoFocusFilter = effect(() => {\n    const isMobile = this.contentSvc.isMobile();\n    this.pDropdown.autofocusFilter = !isMobile;\n  });\n  setStyleClass = effect(() => {\n    this.pDropdown.styleClass = this.labDropdownBase();\n  });\n\n  ngOnInit(): void {\n    this.pDropdown.appendTo = 'body';\n    this.pDropdown.filter = true;\n    this.pDropdown.scrollHeight = '40vh';\n    this.pDropdown.panelStyleClass = 'tooltip';\n  }\n}\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  output,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { DropdownChangeEvent } from 'primeng/dropdown';\n\nimport { coalesce, notNullish } from '~/helpers';\nimport {\n  Beacon,\n  ItemId,\n  Machine,\n  ModuleSettings,\n  Rational,\n  rational,\n} from '~/models';\nimport { LabState, Settings } from '~/store';\nimport { RecipeUtility } from '~/utilities';\n\n@Component({\n  selector: 'lab-modules',\n  templateUrl: './modules.component.html',\n  styleUrl: './modules.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModulesComponent {\n  store = inject(Store<LabState>);\n\n  entity = input.required<Machine | Beacon>();\n  modules = input.required<ModuleSettings[]>();\n  recipeId = input<string>();\n\n  setValue = output<ModuleSettings[]>();\n\n  data = this.store.selectSignal(Settings.getDataset);\n\n  exclude = computed(() =>\n    this.modules()\n      .map((m) => m.id)\n      .filter(notNullish),\n  );\n  sum = computed(() =>\n    this.modules()\n      .map((m) => m.count)\n      .filter(notNullish)\n      .reduce((s, c) => s.add(c), rational(0n)),\n  );\n  options = computed(() => {\n    return RecipeUtility.moduleOptions(\n      this.entity(),\n      this.data(),\n      this.recipeId(),\n    );\n  });\n  maximum = computed(() => {\n    const values = this.modules();\n    const slots = coalesce(this.entity().modules, rational(0n));\n    if (slots === true) return values.map(() => null);\n    let sum = this.sum();\n    const empty = values.find((e) => e.id === ItemId.Module);\n    if (empty) sum = sum.sub(coalesce(empty.count, rational(0n)));\n    const remain = slots.sub(sum);\n    return values.map((e) => coalesce(e.count, rational(0n)).add(remain));\n  });\n\n  zero = rational(0n);\n  ItemId = ItemId;\n\n  setCount(i: number, count: Rational): void {\n    const modules = this.modules().map((m, j) =>\n      i === j ? { ...m, ...{ count } } : m,\n    );\n    this.updateEmpty(modules);\n    this.setValue.emit(modules);\n  }\n\n  setId(i: number, event: DropdownChangeEvent): void {\n    event.originalEvent.stopPropagation();\n    const id = event.value;\n    const modules = this.modules().map((m, j) =>\n      i === j ? { ...m, ...{ id } } : m,\n    );\n    this.setValue.emit(modules);\n  }\n\n  removeEntry(i: number): void {\n    const modules = this.modules().filter((_, j) => i !== j);\n    this.updateEmpty(modules);\n    this.setValue.emit(modules);\n  }\n\n  updateEmpty(modules: ModuleSettings[]): void {\n    const slots = this.entity().modules;\n    if (slots === true || slots == null) return;\n    const sum = modules\n      .map((m) => m.count)\n      .filter(notNullish)\n      .reduce((s, c) => s.add(c), rational(0n));\n    if (sum.lt(slots)) {\n      const toAdd = slots.sub(sum);\n      const empty = modules.find((e) => e.id === ItemId.Module);\n      if (empty) {\n        empty.count = coalesce(empty.count, rational(0n)).add(toAdd);\n      } else {\n        modules.push({ id: ItemId.Module, count: toAdd });\n      }\n    } else if (sum.gt(slots)) {\n      const toSubtract = sum.sub(slots);\n      const empty = modules.find((e) => e.id === ItemId.Module);\n      if (empty) {\n        empty.count = coalesce(empty.count, rational(0n)).sub(toSubtract);\n        if (empty.count.isZero()) modules.splice(modules.indexOf(empty), 1);\n      }\n    }\n  }\n}\n", "<div class=\"d-flex flex-column\">\n  @for (entry of modules(); let i = $index; track entry.id) {\n    <div class=\"p-inputgroup\">\n      <lab-input-number\n        width=\"3rem\"\n        [value]=\"entry.count ?? zero\"\n        [maximum]=\"maximum()[i]\"\n        [disabled]=\"entry.id === ItemId.Module\"\n        (setValue)=\"setCount(i, $event)\"\n      ></lab-input-number>\n      <p-dropdown\n        labDropdownBase=\"icon\"\n        [ngModel]=\"entry.id\"\n        [pTooltip]=\"tooltip\"\n        [options]=\"options() | filterOptions: exclude() : entry.id\"\n        (onChange)=\"setId(i, $event)\"\n      >\n        <ng-template pTemplate=\"selectedItem\" let-item>\n          <div class=\"d-flex\">\n            <i [class]=\"item.value | iconSmClass\"></i>\n          </div>\n        </ng-template>\n        <ng-template pTemplate=\"item\" let-item>\n          <div\n            class=\"d-flex align-items-center py-2 w-100 h-100\"\n            [pTooltip]=\"item.value !== 'module' ? tooltip : undefined\"\n          >\n            <i [class]=\"item.value | iconSmClass\"></i>\n            <div class=\"ms-3 text-truncate\">\n              {{ item.label }}\n            </div>\n            <ng-template #tooltip>\n              <lab-tooltip [id]=\"item.value\" type=\"module\"></lab-tooltip>\n            </ng-template>\n          </div>\n        </ng-template>\n      </p-dropdown>\n      <ng-template #tooltip>\n        @if (entry.id) {\n          <lab-tooltip [id]=\"entry.id\" type=\"module\"></lab-tooltip>\n        }\n      </ng-template>\n      @if (entity().modules !== true) {\n        <button\n          pButton\n          pRipple\n          type=\"button\"\n          icon=\"fa-solid fa-times\"\n          class=\"p-button-outlined\"\n          [disabled]=\"entry.id === ItemId.Module\"\n          (click)=\"removeEntry(i)\"\n        ></button>\n      }\n    </div>\n  }\n</div>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Output,\n  signal,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { DropdownChangeEvent } from 'primeng/dropdown';\n\nimport { OverlayComponent } from '~/components';\nimport { spread } from '~/helpers';\nimport {\n  BeaconSettings,\n  ItemId,\n  ModuleSettings,\n  rational,\n  Rational,\n} from '~/models';\nimport { LabState, Settings } from '~/store';\n\n@Component({\n  selector: 'lab-beacons-overlay',\n  templateUrl: './beacons-overlay.component.html',\n  styleUrl: './beacons-overlay.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeaconsOverlayComponent extends OverlayComponent {\n  store = inject(Store<LabState>);\n\n  @Output() setValue = new EventEmitter<BeaconSettings[]>();\n\n  data = this.store.selectSignal(Settings.getDataset);\n  options = this.store.selectSignal(Settings.getOptions);\n\n  beacons = signal<BeaconSettings[]>([]);\n  recipeId = signal<string | undefined>(undefined);\n  zero = rational(0n);\n\n  show(event: Event, values: BeaconSettings[], recipeId?: string): void {\n    this.beacons.set(\n      values.map((v) => ({\n        ...v,\n        ...{ modules: v.modules?.map((m) => ({ ...m })) },\n      })),\n    );\n    this.recipeId.set(recipeId);\n    this._show(event);\n  }\n\n  setCount(i: number, count: Rational): void {\n    this.beacons.update((values) => {\n      values[i].count = count;\n      return values;\n    });\n  }\n\n  setId(i: number, event: DropdownChangeEvent): void {\n    event.originalEvent.stopPropagation();\n    this.beacons.update((values) => {\n      values[i].id = event.value;\n      return values;\n    });\n  }\n\n  setModules(i: number, modules: ModuleSettings[]): void {\n    this.beacons.update((values) => {\n      values[i].modules = modules;\n      return values;\n    });\n  }\n\n  setTotal(i: number, total: Rational): void {\n    this.beacons.update((values) => {\n      values[i].total = total;\n      return values;\n    });\n  }\n\n  removeEntry(i: number): void {\n    this.beacons.update((values) => values.filter((_, vi) => vi !== i));\n  }\n\n  addEntry(): void {\n    this.beacons.update((values) => {\n      const id = this.options().beacons[0].value;\n      const count = this.data().beaconEntities[id].modules;\n      const modules: ModuleSettings[] = [\n        {\n          id: ItemId.Module,\n          count: count,\n        },\n      ];\n      values.push({ id, count: rational(0n), modules });\n      return values;\n    });\n  }\n\n  save(): void {\n    const value = this.beacons().map((b) =>\n      spread(b, { modules: b.modules?.filter((m) => m.count?.nonzero()) }),\n    );\n    this.setValue.emit(value);\n  }\n}\n", "<p-overlayPanel appendTo=\"body\" (onHide)=\"onHide()\">\n  <div class=\"d-flex flex-column gap-2\">\n    @for (entry of beacons(); let i = $index; track i) {\n      <div class=\"d-flex flex-column\">\n        <div class=\"p-inputgroup\">\n          <lab-input-number\n            width=\"3rem\"\n            [pTooltip]=\"'beaconsOverlay.eachTooltip' | translate\"\n            tooltipPosition=\"top\"\n            [value]=\"entry.count ?? zero\"\n            (setValue)=\"setCount(i, $event)\"\n          >\n          </lab-input-number>\n          @if (entry.total) {\n            <lab-input-number\n              width=\"3rem\"\n              [pTooltip]=\"'beaconsOverlay.totalTooltip' | translate\"\n              tooltipPosition=\"top\"\n              [value]=\"entry.total\"\n              (setValue)=\"setTotal(i, $event)\"\n            >\n            </lab-input-number>\n          }\n          <p-dropdown\n            labDropdownBase=\"icon\"\n            [ngModel]=\"entry.id\"\n            [pTooltip]=\"tooltip\"\n            [options]=\"options().beacons\"\n            (onChange)=\"setId(i, $event)\"\n          >\n            <ng-template pTemplate=\"selectedItem\" let-item>\n              <div class=\"d-flex\">\n                <i [class]=\"item.value | iconSmClass\"></i>\n              </div>\n            </ng-template>\n            <ng-template pTemplate=\"item\" let-item>\n              <div\n                class=\"d-flex align-items-center py-2 w-100 h-100\"\n                [pTooltip]=\"tooltip\"\n              >\n                <i [class]=\"item.value | iconSmClass\"></i>\n                <div class=\"ms-3 text-truncate\">\n                  {{ item.label }}\n                </div>\n                <ng-template #tooltip>\n                  <lab-tooltip [id]=\"item.value\" type=\"beacon\"></lab-tooltip>\n                </ng-template>\n              </div>\n            </ng-template>\n          </p-dropdown>\n          <ng-template #tooltip>\n            @if (entry.id) {\n              <lab-tooltip [id]=\"entry.id\" type=\"beacon\"></lab-tooltip>\n            }\n          </ng-template>\n          <button\n            pButton\n            pRipple\n            type=\"button\"\n            icon=\"fa-solid fa-times\"\n            class=\"p-button-outlined\"\n            [disabled]=\"beacons().length === 1\"\n            (click)=\"removeEntry(i)\"\n          ></button>\n        </div>\n        @if (entry.id && entry.modules) {\n          <lab-modules\n            [entity]=\"data().beaconEntities[entry.id]\"\n            [modules]=\"entry.modules\"\n            [recipeId]=\"recipeId()\"\n            (setValue)=\"setModules(i, $event)\"\n          ></lab-modules>\n        }\n      </div>\n    }\n    <div class=\"d-flex\">\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        icon=\"fa-solid fa-plus\"\n        class=\"p-button-outlined p-button-sm flex-grow-1\"\n        [label]=\"'beaconsOverlay.addBeacons' | translate\"\n        (click)=\"addEntry()\"\n      ></button>\n    </div>\n    <div class=\"d-flex gap-2\">\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        icon=\"fa-solid fa-check\"\n        class=\"p-button-outlined p-button-sm flex-grow-1\"\n        [label]=\"'ok' | translate\"\n        (click)=\"hide()\"\n      ></button>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        icon=\"fa-solid fa-xmark\"\n        class=\"p-button-outlined p-button-sm p-button-secondary flex-grow-1\"\n        [label]=\"'cancel' | translate\"\n        (click)=\"hide(true)\"\n      ></button>\n    </div>\n  </div>\n</p-overlayPanel>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Output,\n  signal,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { OverlayComponent } from '~/components';\nimport { Machine, ModuleSettings } from '~/models';\nimport { LabState } from '~/store';\n\n@Component({\n  selector: 'lab-modules-overlay',\n  templateUrl: './modules-overlay.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModulesOverlayComponent extends OverlayComponent {\n  store = inject(Store<LabState>);\n\n  @Output() setValue = new EventEmitter<ModuleSettings[]>();\n\n  machine = signal<Machine | undefined>(undefined);\n  modules = signal<ModuleSettings[]>([]);\n  recipeId = signal<string | undefined>(undefined);\n\n  show(\n    event: Event,\n    modules: ModuleSettings[],\n    machine: Machine,\n    recipeId?: string,\n  ): void {\n    this.machine.set(machine);\n    this.modules.set(modules.map((m) => ({ ...m })));\n    this.recipeId.set(recipeId);\n    this._show(event);\n  }\n\n  save(): void {\n    let values = this.modules();\n    if (this.machine()?.modules !== true)\n      values = values.filter((e) => e.count?.nonzero());\n    this.setValue.emit(values);\n  }\n}\n", "<p-overlayPanel appendTo=\"body\" (onHide)=\"onHide()\">\n  <div class=\"d-flex flex-column gap-2\">\n    @if (machine(); as _machine) {\n      <lab-modules\n        [entity]=\"_machine\"\n        [modules]=\"modules()\"\n        [recipeId]=\"recipeId()\"\n        (setValue)=\"modules.set($event)\"\n      ></lab-modules>\n    }\n    <div class=\"d-flex gap-2\">\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        icon=\"fa-solid fa-check\"\n        class=\"p-button-outlined p-button-sm flex-grow-1\"\n        [label]=\"'ok' | translate\"\n        (click)=\"hide()\"\n      ></button>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        icon=\"fa-solid fa-xmark\"\n        class=\"p-button-outlined p-button-sm p-button-secondary flex-grow-1\"\n        [label]=\"'cancel' | translate\"\n        (click)=\"hide(true)\"\n      ></button>\n    </div>\n  </div>\n</p-overlayPanel>\n", "import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[labNoDrag]',\n})\nexport class NoDragDirective {\n  @HostListener('mousedown', ['$event']) onMousedown(event: MouseEvent): void {\n    event.stopPropagation();\n  }\n\n  @HostListener('touchstart', ['$event']) onTouchStart(\n    event: TouchEvent,\n  ): void {\n    event.stopPropagation();\n  }\n}\n", "import { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  computed,\n  effect,\n  inject,\n  input,\n  OnInit,\n  viewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { MenuItem, SortEvent } from 'primeng/api';\nimport { Table } from 'primeng/table';\nimport { BehaviorSubject, combineLatest, filter, first, pairwise } from 'rxjs';\n\nimport { coalesce } from '~/helpers';\nimport {\n  AdjustedDataset,\n  BeaconSettings,\n  EnergyType,\n  Entities,\n  Game,\n  IdValueDefaultPayload,\n  ItemId,\n  ModuleSettings,\n  ObjectiveBase,\n  ObjectiveUnit,\n  rational,\n  Rational,\n  Step,\n  StepDetail,\n  stepDetailIcon,\n  StepDetailTab,\n} from '~/models';\nimport { StepIdPipe } from '~/routes/main/pipes';\nimport {\n  ContentService,\n  ExportService,\n  RouterService,\n  TrackService,\n} from '~/services';\nimport {\n  Items,\n  LabState,\n  Machines,\n  Objectives,\n  Preferences,\n  Recipes,\n  Settings,\n} from '~/store';\nimport { BrowserUtility, RecipeUtility } from '~/utilities';\n\nexport type StepsMode = 'all' | 'focus';\n\n@Component({\n  selector: 'lab-steps',\n  templateUrl: './steps.component.html',\n  styleUrls: ['./steps.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StepsComponent implements OnInit, AfterViewInit {\n  document = inject(DOCUMENT);\n  route = inject(ActivatedRoute);\n  ref = inject(ChangeDetectorRef);\n  contentSvc = inject(ContentService);\n  trackSvc = inject(TrackService);\n  store = inject(Store<LabState>);\n  exportSvc = inject(ExportService);\n  routerSvc = inject(RouterService);\n\n  focus = input(false);\n  selectedId = input<string | null>();\n  steps = computed(() => {\n    const steps = [...this.store.selectSignal(Objectives.getSteps)()];\n    const focus = this.focus();\n    if (!focus) return steps;\n    const selectedId = this.selectedId();\n    return steps.filter((s) => s.id === selectedId);\n  });\n  activeItemsEffect = effect(() => {\n    const steps = this.steps();\n    const stepDetails = this.store.selectSignal(Objectives.getStepDetails)();\n    this.setActiveItems(steps, stepDetails);\n  });\n  toggleEffect = effect(() => {\n    const focus = this.focus();\n    const step = this.steps()[0];\n    if (focus && step) {\n      this.stepsTable().toggleRow(step);\n      this.expandRow(step, false);\n    }\n  });\n\n  machinesState = this.store.selectSignal(Machines.getMachinesState);\n  itemsState = this.store.selectSignal(Items.getItemsState);\n  itemsModified = this.store.selectSignal(Items.getItemsModified);\n  stepsModified = this.store.selectSignal(Objectives.getStepsModified);\n  totals = this.store.selectSignal(Objectives.getTotals);\n  stepDetails = this.store.selectSignal(Objectives.getStepDetails);\n  stepById = this.store.selectSignal(Objectives.getStepById);\n  stepByItemEntities = this.store.selectSignal(\n    Objectives.getStepByItemEntities,\n  );\n  stepTree = this.store.selectSignal(Objectives.getStepTree);\n  effectivePowerUnit = this.store.selectSignal(\n    Objectives.getEffectivePowerUnit,\n  );\n  recipesState = this.store.selectSignal(Recipes.getRecipesState);\n  recipesModified = this.store.selectSignal(Objectives.getRecipesModified);\n  data = this.store.selectSignal(Recipes.getAdjustedDataset);\n  columnsState = this.store.selectSignal(Settings.getColumnsState);\n  settings = this.store.selectSignal(Settings.getSettings);\n  dispRateInfo = this.store.selectSignal(Settings.getDisplayRateInfo);\n  options = this.store.selectSignal(Settings.getOptions);\n  beltSpeed = this.store.selectSignal(Settings.getBeltSpeed);\n  preferences = this.store.selectSignal(Preferences.preferencesState);\n\n  sortSteps$ = new BehaviorSubject<SortEvent | null>(null);\n\n  stepsTable = viewChild.required<Table>('stepsTable');\n\n  activeItem: Entities<MenuItem> = {};\n  fragmentId: string | null | undefined;\n  stepDetailIcon = stepDetailIcon;\n\n  ItemId = ItemId;\n  StepDetailTab = StepDetailTab;\n  Game = Game;\n  EnergyType = EnergyType;\n  ObjectiveUnit = ObjectiveUnit;\n  rational = rational;\n\n  constructor() {\n    combineLatest([\n      this.sortSteps$.pipe(pairwise()),\n      this.store.select(Objectives.getSteps),\n    ])\n      .pipe(takeUntilDestroyed())\n      .subscribe(([[prev, curr], steps]) => {\n        this.sortSteps(prev, curr, steps);\n      });\n  }\n\n  ngOnInit(): void {\n    this.route.fragment\n      .pipe(\n        first(),\n        filter((f) => f != null),\n      )\n      .subscribe((id) => {\n        // Store the fragment to navigate to it after the component loads\n        this.fragmentId = id;\n      });\n  }\n\n  ngAfterViewInit(): void {\n    // Now that component is loaded, try navigating to the fragment\n    try {\n      if (this.fragmentId) {\n        const [_, stepId, tabId] = this.fragmentId.split('_');\n        combineLatest([\n          this.store.select(Objectives.getSteps),\n          this.store.select(Objectives.getStepDetails),\n        ])\n          .pipe(first())\n          .subscribe(([steps, stepDetails]) => {\n            const step = steps.find((s) => s.id === stepId);\n            if (step) {\n              const tabs = stepDetails[step.id].tabs;\n              if (tabs.length) {\n                if (this.stepsTable) {\n                  this.stepsTable().toggleRow(step);\n                  setTimeout(() => {\n                    if (tabId) {\n                      const tab = this.document.querySelector(\n                        '#' + this.fragmentId,\n                      ) as HTMLElement | null;\n                      if (tab) tab.click();\n                    } else {\n                      this.document\n                        .querySelector('#' + this.fragmentId)\n                        ?.scrollIntoView();\n                    }\n                  }, 10);\n                }\n              }\n            }\n          });\n      }\n    } catch {\n      // ignore error\n    }\n  }\n\n  sortSteps(\n    prev: SortEvent | null,\n    curr: SortEvent | null,\n    steps: Step[],\n  ): void {\n    if (curr == null || curr.order == null || curr.field == null) return;\n    const order = curr.order;\n    const field = curr.field as\n      | 'items'\n      | 'belts'\n      | 'wagons'\n      | 'machines'\n      | 'power'\n      | 'pollution';\n\n    if (\n      prev != null &&\n      prev.field === field &&\n      prev.order !== order &&\n      order === -1 &&\n      this.stepsTable != null\n    ) {\n      /**\n       * User has sorted the same column three times in a row. Reset sort and\n       * reset table state, otherwise PrimeNG will not ever reset sort.\n       */\n      curr.data?.sort((a: Step, b: Step) => {\n        const diff = steps.indexOf(a) - steps.indexOf(b);\n        return diff;\n      });\n      this.stepsTable().sortOrder = 0;\n      this.stepsTable().sortField = '';\n      this.stepsTable().reset();\n      return this.sortSteps$.next(null);\n    }\n\n    // Sort by numeric field\n    curr.data?.sort((a: Step, b: Step) => {\n      const diff = (a[field] ?? rational(0n)).sub(b[field] ?? rational(0n));\n      return diff.toNumber() * order;\n    });\n  }\n\n  setActiveItems(steps: Step[], stepDetails: Entities<StepDetail>): void {\n    steps.forEach((step) => this._updateActiveItem(step, stepDetails, false));\n  }\n\n  expandRow(step: Step, expanded: boolean): void {\n    if (expanded) return;\n    this._updateActiveItem(step, this.stepDetails(), true);\n  }\n\n  private _updateActiveItem(\n    step: Step,\n    stepDetails: Entities<StepDetail>,\n    force: boolean,\n  ): void {\n    const id = StepIdPipe.transform(step);\n    const item = this._getActiveItem(step, id, stepDetails, force);\n    if (item) {\n      const id = StepIdPipe.transform(step);\n      this.activeItem[id] = item;\n    }\n  }\n\n  private _getActiveItem(\n    step: Step,\n    id: string,\n    stepDetails: Entities<StepDetail>,\n    force: boolean,\n  ): MenuItem | null | undefined {\n    const old = this.activeItem[id];\n    const detail = stepDetails[step.id];\n\n    if (detail == null) return null;\n\n    if (old != null) {\n      const match = detail.tabs.find((t) => t.label === old.label);\n      if (match != null) return match;\n    }\n\n    if (old == null && !force) return null;\n\n    const userTab = BrowserUtility.stepDetailTab;\n    if (userTab) {\n      const match = detail.tabs.find((t) => t.label === userTab);\n      if (match != null) return match;\n    }\n\n    return detail.tabs[0];\n  }\n\n  setActiveItem(step: Step, item: MenuItem | null | undefined): void {\n    if (item == null) return;\n    const id = StepIdPipe.transform(step);\n    this.activeItem[id] = item;\n    BrowserUtility.stepDetailTab = item.label as StepDetailTab;\n  }\n\n  resetStep(step: Step): void {\n    if (step.itemId) {\n      this.resetItem(step.itemId);\n    }\n\n    if (step.recipeObjectiveId) {\n      this.resetRecipeObjective(step.recipeObjectiveId);\n    } else if (step.recipeId) {\n      this.resetRecipe(step.recipeId);\n    }\n  }\n\n  toggleRecipes(ids: string[], value: boolean, data: AdjustedDataset): void {\n    const payload = ids.map(\n      (id): IdValueDefaultPayload<boolean> => ({\n        id,\n        value,\n        def: coalesce(data.defaults?.excludedRecipeIds, []).includes(id),\n      }),\n    );\n    this.setRecipeExcludedBatch(payload);\n  }\n\n  toggleRecipe(\n    id: string,\n    recipesState: Recipes.RecipesState,\n    data: AdjustedDataset,\n  ): void {\n    const value = !recipesState[id].excluded;\n    const def = coalesce(data.defaults?.excludedRecipeIds, []).some(\n      (i) => i === id,\n    );\n    this.setRecipeExcluded(id, value, def);\n  }\n\n  changeRecipeField(\n    step: Step,\n    event: string | number | ModuleSettings[] | BeaconSettings[],\n    field: 'machine' | 'fuel' | 'modules' | 'beacons' | 'overclock',\n  ): void {\n    if (step.recipeId == null) return;\n\n    const settings = step.recipeSettings;\n    if (settings?.machineId == null) return;\n\n    const id = step.recipeObjectiveId ?? step.recipeId;\n    const isObjective = step.recipeObjectiveId != null;\n    const machinesState = this.machinesState();\n    const machineSettings = machinesState.entities[settings.machineId];\n    switch (field) {\n      case 'machine': {\n        if (typeof event !== 'string') return;\n        const data = this.data();\n        this.setMachine(\n          id,\n          event,\n          RecipeUtility.bestMatch(\n            data.recipeEntities[step.recipeId].producers,\n            machinesState.ids,\n          ),\n          isObjective,\n        );\n        break;\n      }\n      case 'fuel': {\n        if (typeof event !== 'string') return;\n        this.setFuel(id, event, machineSettings.fuelId, isObjective);\n        break;\n      }\n      case 'modules': {\n        if (!Array.isArray(event)) return;\n        event = event as ModuleSettings[];\n        const machine = this.data().machineEntities[settings.machineId];\n        this.setModules(\n          id,\n          RecipeUtility.dehydrateModules(\n            event,\n            coalesce(settings.moduleOptions, []),\n            machinesState.moduleRankIds,\n            machine.modules,\n            machineSettings.modules,\n          ),\n          isObjective,\n        );\n        break;\n      }\n      case 'beacons': {\n        if (!Array.isArray(event)) return;\n        event = event as BeaconSettings[];\n        const def = machineSettings.beacons;\n        this.setBeacons(\n          id,\n          RecipeUtility.dehydrateBeacons(event, def),\n          isObjective,\n        );\n\n        break;\n      }\n      case 'overclock': {\n        if (typeof event !== 'number') return;\n        const def = machineSettings.overclock;\n        this.setOverclock(id, rational(event), def, isObjective);\n        break;\n      }\n    }\n  }\n\n  changeStepChecked(step: Step, checked: boolean): void {\n    // Priority: 1) Item state, 2) Recipe objective state, 3) Recipe state\n    if (step.itemId != null) {\n      this.setItemChecked(step.itemId, checked);\n    } else if (step.recipeObjectiveId != null) {\n      this.setRecipeChecked(step.recipeObjectiveId, checked, true);\n    } else if (step.recipeId != null) {\n      this.setRecipeChecked(step.recipeId, checked);\n    }\n  }\n\n  /** Action Dispatch Methods */\n  setRows(value: number): void {\n    this.store.dispatch(new Preferences.SetRowsAction(value));\n  }\n\n  setItemExcluded(id: string, value: boolean): void {\n    this.store.dispatch(new Items.SetExcludedAction({ id, value }));\n  }\n\n  setItemChecked(id: string, value: boolean): void {\n    this.store.dispatch(new Items.SetCheckedAction({ id, value }));\n  }\n\n  setBelt(id: string, value: string, def: string): void {\n    this.store.dispatch(new Items.SetBeltAction({ id, value, def }));\n  }\n\n  setWagon(id: string, value: string, def: string): void {\n    this.store.dispatch(new Items.SetWagonAction({ id, value, def }));\n  }\n\n  setRecipeExcluded(id: string, value: boolean, def: boolean): void {\n    this.store.dispatch(new Recipes.SetExcludedAction({ id, value, def }));\n  }\n\n  setRecipeExcludedBatch(payload: IdValueDefaultPayload<boolean>[]): void {\n    this.store.dispatch(new Recipes.SetExcludedBatchAction(payload));\n  }\n\n  addObjective(value: ObjectiveBase): void {\n    this.store.dispatch(new Objectives.AddAction(value));\n  }\n\n  setMachine(id: string, value: string, def: string, objective = false): void {\n    const action = objective\n      ? Objectives.SetMachineAction\n      : Recipes.SetMachineAction;\n    this.store.dispatch(new action({ id, value, def }));\n  }\n\n  setFuel(\n    id: string,\n    value: string,\n    def: string | undefined,\n    objective = false,\n  ): void {\n    const action = objective ? Objectives.SetFuelAction : Recipes.SetFuelAction;\n    this.store.dispatch(new action({ id, value, def }));\n  }\n\n  setModules(\n    id: string,\n    value: ModuleSettings[] | undefined,\n    objective = false,\n  ): void {\n    const action = objective\n      ? Objectives.SetModulesAction\n      : Recipes.SetModulesAction;\n    this.store.dispatch(new action({ id, value }));\n  }\n\n  setBeacons(\n    id: string,\n    value: BeaconSettings[] | undefined,\n    objective = false,\n  ): void {\n    const action = objective\n      ? Objectives.SetBeaconsAction\n      : Recipes.SetBeaconsAction;\n    this.store.dispatch(new action({ id, value }));\n  }\n\n  setOverclock(\n    id: string,\n    value: Rational,\n    def: Rational | undefined,\n    objective = false,\n  ): void {\n    const action = objective\n      ? Objectives.SetOverclockAction\n      : Recipes.SetOverclockAction;\n    this.store.dispatch(new action({ id, value, def }));\n  }\n\n  setRecipeChecked(id: string, value: boolean, objective = false): void {\n    const action = objective\n      ? Objectives.SetCheckedAction\n      : Recipes.SetCheckedAction;\n    this.store.dispatch(new action({ id, value }));\n  }\n\n  resetItem(value: string): void {\n    this.store.dispatch(new Items.ResetItemAction(value));\n  }\n\n  resetRecipe(value: string): void {\n    this.store.dispatch(new Recipes.ResetRecipeAction(value));\n  }\n\n  resetRecipeObjective(value: string): void {\n    this.store.dispatch(new Objectives.ResetObjectiveAction(value));\n  }\n\n  resetChecked(): void {\n    this.store.dispatch(new Items.ResetCheckedAction());\n  }\n\n  resetExcluded(): void {\n    this.store.dispatch(new Items.ResetExcludedAction());\n  }\n\n  resetBelts(): void {\n    this.store.dispatch(new Items.ResetBeltsAction());\n  }\n\n  resetWagons(): void {\n    this.store.dispatch(new Items.ResetWagonsAction());\n  }\n\n  resetMachines(): void {\n    this.store.dispatch(new Recipes.ResetMachinesAction());\n  }\n\n  resetBeacons(): void {\n    this.store.dispatch(new Recipes.ResetBeaconsAction());\n  }\n}\n", "<p-table\n  #stepsTable\n  dataKey=\"id\"\n  [rowTrackBy]=\"trackSvc.trackStep\"\n  styleClass=\"p-datatable-sm\"\n  [value]=\"steps()\"\n  [customSort]=\"true\"\n  [rowExpandMode]=\"focus() ? 'single' : 'multiple'\"\n  [defaultSortOrder]=\"-1\"\n  [paginator]=\"!focus() && !preferences().disablePaginator\"\n  [rows]=\"preferences().rows\"\n  [rowsPerPageOptions]=\"[25, 50, 100, 1000]\"\n  (rowsChange)=\"setRows($event)\"\n  [showCurrentPageReport]=\"true\"\n  (sortFunction)=\"sortSteps$.next($event)\"\n>\n  <ng-template pTemplate=\"header\">\n    <tr>\n      <!-- Table actions row -->\n      <td colspan=\"100\">\n        <div class=\"d-flex gap-2 py-2\">\n          <button\n            pButton\n            pRipple\n            type=\"button\"\n            class=\"p-button-outlined\"\n            icon=\"fa-solid fa-table-columns\"\n            [label]=\"'steps.columnSettings' | translate\"\n            (click)=\"contentSvc.showColumns$.next()\"\n          ></button>\n          @if (steps().length) {\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-file-arrow-down\"\n              [label]=\"'steps.downloadAsCsv' | translate\"\n              (click)=\"exportSvc.stepsToCsv(steps())\"\n            ></button>\n          }\n        </div>\n      </td>\n    </tr>\n    <tr class=\"column-header-row\">\n      <!-- Row actions -->\n      <th></th>\n      <!-- Checkbox -->\n      @if (!focus() && columnsState().checkbox.show) {\n        <th>\n          <div class=\"d-flex align-items-center justify-content-center\">\n            <i class=\"fa-solid fa-square-check\"></i>\n            @if (itemsModified().checked || recipesModified().checked) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"ms-2 p-button-text p-button-rounded\"\n                icon=\"fa-solid fa-rotate-left\"\n                [pTooltip]=\"'steps.checkedUndoTooltip' | translate\"\n                (click)=\"resetChecked()\"\n              ></button>\n            }\n          </div>\n        </th>\n      }\n      <!-- Tree -->\n      @if (!focus() && columnsState().tree.show) {\n        <th>{{ 'options.column.tree' | translate }}</th>\n      }\n      <!-- Items (Value / Icon)-->\n      <th colspan=\"2\" pSortableColumn=\"items\">\n        <div class=\"d-flex align-items-center\">\n          <span>{{ dispRateInfo().itemsLabel | translate }}</span>\n          @if (!focus()) {\n            <p-sortIcon field=\"items\"></p-sortIcon>\n          }\n          @if (itemsModified().excluded) {\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"ms-2 p-button-text p-button-rounded\"\n              icon=\"fa-solid fa-rotate-left\"\n              [pTooltip]=\"'steps.itemsUndoTooltip' | translate\"\n              (click)=\"resetExcluded(); $event.stopImmediatePropagation()\"\n            ></button>\n          }\n        </div>\n      </th>\n      <!-- Belts -->\n      @if (columnsState().belts.show) {\n        <th colspan=\"2\" pSortableColumn=\"belts\">\n          <div class=\"d-flex align-items-center\">\n            <span>{{ 'options.column.belts' | translate }}</span>\n            @if (!focus()) {\n              <p-sortIcon field=\"belts\"></p-sortIcon>\n            }\n            @if (itemsModified().belts) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"ms-2 p-button-text p-button-rounded\"\n                icon=\"fa-solid fa-rotate-left\"\n                [pTooltip]=\"'steps.beltsUndoTooltip' | translate\"\n                (click)=\"resetBelts(); $event.stopImmediatePropagation()\"\n              ></button>\n            }\n          </div>\n        </th>\n      }\n      <!-- Wagons -->\n      @if (columnsState().wagons.show) {\n        <th colspan=\"2\" pSortableColumn=\"wagons\">\n          <div class=\"d-flex align-items-center\">\n            <span>{{ dispRateInfo().wagonsLabel | translate }}</span>\n            @if (!focus()) {\n              <p-sortIcon field=\"wagons\"></p-sortIcon>\n            }\n            @if (itemsModified().wagons) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"ms-2 p-button-text p-button-rounded\"\n                icon=\"fa-solid fa-rotate-left\"\n                [pTooltip]=\"'steps.wagonsUndoTooltip' | translate\"\n                (click)=\"resetWagons(); $event.stopImmediatePropagation()\"\n              ></button>\n            }\n          </div>\n        </th>\n      }\n      <!-- Machines -->\n      <th colspan=\"2\" pSortableColumn=\"machines\">\n        <div class=\"d-flex align-items-center\">\n          <span>{{ 'options.column.machines' | translate }}</span>\n          @if (!focus()) {\n            <p-sortIcon field=\"machines\"></p-sortIcon>\n          }\n          @if (recipesModified().machines) {\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"ms-2 p-button-text p-button-rounded\"\n              icon=\"fa-solid fa-rotate-left\"\n              [pTooltip]=\"'steps.machinesUndoTooltip' | translate\"\n              (click)=\"resetMachines(); $event.stopImmediatePropagation()\"\n            ></button>\n          }\n        </div>\n      </th>\n      <!-- Beacons -->\n      @if (columnsState().beacons.show) {\n        <th colspan=\"2\">\n          <div class=\"d-flex align-items-center\">\n            <span>{{ 'options.column.beacons' | translate }}</span>\n            @if (recipesModified().beacons) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"ms-2 p-button-text p-button-rounded\"\n                icon=\"fa-solid fa-rotate-left\"\n                [pTooltip]=\"'steps.beaconsUndoTooltip' | translate\"\n                (click)=\"resetBeacons()\"\n              ></button>\n            }\n          </div>\n        </th>\n      }\n      <!-- Power -->\n      @if (columnsState().power.show) {\n        <th pSortableColumn=\"power\">\n          <div class=\"d-flex align-items-center justify-content-end\">\n            <span>{{ 'options.column.power' | translate }}</span>\n            @if (!focus()) {\n              <p-sortIcon field=\"power\"></p-sortIcon>\n            }\n          </div>\n        </th>\n      }\n      <!-- Pollution -->\n      @if (columnsState().pollution.show) {\n        <th pSortableColumn=\"pollution\">\n          <div class=\"d-flex align-items-center justify-content-end\">\n            <span>{{ dispRateInfo().pollutionLabel | translate }}</span>\n            @if (!focus()) {\n              <p-sortIcon field=\"pollution\"></p-sortIcon>\n            }\n          </div>\n        </th>\n      }\n      <!-- Link -->\n      @if (columnsState().link.show) {\n        <th></th>\n      }\n    </tr>\n  </ng-template>\n  <ng-template pTemplate=\"body\" let-_step let-expanded=\"expanded\">\n    @if (_step | asStep; as step) {\n      <tr>\n        <!-- Expand row -->\n        <td class=\"w-0 px-0 px-sm-1 position-relative\">\n          <div [id]=\"'step_' + step.id\" class=\"fragment\"></div>\n          @for (item of stepDetails()[step.id].tabs; track item.id) {\n            <div\n              [id]=\"'step_' + step.id + '_' + item.label\"\n              class=\"fragment\"\n            ></div>\n          }\n          <div class=\"d-flex\">\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-text p-button-rounded transition-ease\"\n              [class.fa-rotate-90]=\"expanded\"\n              icon=\"fa-solid fa-angle-right\"\n              [pTooltip]=\"\n                (expanded ? 'steps.hideDetails' : 'steps.showDetails')\n                  | translate\n              \"\n              [pRowToggler]=\"step\"\n              (click)=\"expandRow(step, expanded)\"\n            ></button>\n          </div>\n        </td>\n        <!-- Checkbox -->\n        @if (!focus() && columnsState().checkbox.show) {\n          <td class=\"px-0 px-sm-2\">\n            <div class=\"d-flex justify-content-center\">\n              <p-checkbox\n                [binary]=\"true\"\n                [ngModel]=\"step.checked\"\n                (onChange)=\"changeStepChecked(step, $event.checked)\"\n              ></p-checkbox>\n            </div>\n          </td>\n        }\n        <!-- Tree -->\n        @if (!focus() && columnsState().tree.show) {\n          <td class=\"overflow-hidden px-0 px-sm-1 py-0\">\n            <div class=\"d-flex align-items-center links\">\n              @if (!stepsTable.sortField && stepTree()[step.id]?.length) {\n                @for (\n                  trail of stepTree()[step.id];\n                  track $index;\n                  let last = $last\n                ) {\n                  <div\n                    class=\"connect\"\n                    [class.trail]=\"trail\"\n                    [class.last]=\"last\"\n                  ></div>\n                }\n                <div class=\"indent\"></div>\n              }\n              <div class=\"icon\">\n                @if (step.itemId && step.recipeObjectiveId == null) {\n                  <button\n                    pButton\n                    pRipple\n                    type=\"button\"\n                    class=\"hover-action p-button-text\"\n                    [class.hover-active]=\"itemsState()[step.itemId].excluded\"\n                    [icon]=\"step.itemId | iconSmClass\"\n                    [pTooltip]=\"tooltip\"\n                    (click)=\"\n                      setItemExcluded(\n                        step.itemId,\n                        !itemsState()[step.itemId].excluded\n                      )\n                    \"\n                  >\n                    <i class=\"hover-icon fa-solid fa-eye-slash\"></i>\n                    <ng-template #tooltip>\n                      <lab-tooltip [id]=\"step.itemId\"></lab-tooltip>\n                    </ng-template>\n                  </button>\n                } @else {\n                  <i\n                    [class]=\"step.recipeId | iconSmClass: 'recipe'\"\n                    [pTooltip]=\"tooltip\"\n                  >\n                    @if (step.recipeObjectiveId != null) {\n                      <span>#{{ step.recipeObjectiveId }}</span>\n                    }\n                    <ng-template #tooltip>\n                      @if (step.recipeId) {\n                        <lab-tooltip\n                          [id]=\"step.recipeId\"\n                          type=\"recipe\"\n                        ></lab-tooltip>\n                      }\n                    </ng-template>\n                  </i>\n                }\n              </div>\n            </div>\n          </td>\n        }\n        <!-- Items (Value / Icon) -->\n        @if (step.itemId && step.items) {\n          <td class=\"w-0 px-0 px-sm-2 text-end\">\n            @if (step.surplus && step.surplus.nonzero()) {\n              <span class=\"monospace\"\n                >(+{{ step.surplus | rate: columnsState().items.precision }})\n              </span>\n            }\n            <span class=\"monospace\">{{\n              step.items.sub(step.surplus ?? rational(0))\n                | rate: columnsState().items.precision\n            }}</span>\n          </td>\n          <td class=\"px-0 pe-sm-2\">\n            <div class=\"d-flex align-items-center\">\n              <span class=\"find-text\">{{\n                data().itemEntities[step.itemId].name\n              }}</span>\n              @if (\n                !preferences().hideDuplicateIcons || !columnsState().tree.show\n              ) {\n                <button\n                  pButton\n                  pRipple\n                  type=\"button\"\n                  class=\"hover-action p-button-text\"\n                  [class.hover-active]=\"itemsState()[step.itemId].excluded\"\n                  [icon]=\"step.itemId | iconSmClass\"\n                  [pTooltip]=\"tooltip\"\n                  (click)=\"\n                    setItemExcluded(\n                      step.itemId,\n                      !itemsState()[step.itemId].excluded\n                    )\n                  \"\n                >\n                  <i class=\"hover-icon fa-solid fa-eye-slash\"></i>\n                  <ng-template #tooltip>\n                    <lab-tooltip [id]=\"step.itemId\"></lab-tooltip>\n                  </ng-template>\n                </button>\n              }\n            </div>\n          </td>\n        } @else {\n          <td colspan=\"2\"></td>\n        }\n        <!-- Belts -->\n        @if (columnsState().belts.show) {\n          @if (step.itemId && step.belts) {\n            @if (itemsState()[step.itemId].beltId; as beltId) {\n              <td class=\"w-0 px-0 px-sm-2 text-end\">\n                <span class=\"monospace\">{{\n                  step.belts | rate: columnsState().belts.precision\n                }}</span>\n              </td>\n              <td class=\"px-0 pe-sm-2\">\n                <div class=\"d-flex align-items-center\">\n                  <!-- Belt dropdown -->\n                  @if (\n                    data().beltIds.indexOf(beltId) !== -1 && settings().beltId;\n                    as defaultBeltId\n                  ) {\n                    <p-dropdown\n                      labDropdownBase=\"icon\"\n                      [pTooltip]=\"tooltip\"\n                      [ngModel]=\"beltId\"\n                      [options]=\"options().belts\"\n                      (onChange)=\"\n                        setBelt(step.itemId, $event.value, defaultBeltId)\n                      \"\n                    >\n                      <ng-template pTemplate=\"selectedItem\" let-item>\n                        @if (item) {\n                          <div class=\"d-flex\">\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                          </div>\n                        }\n                      </ng-template>\n                      <ng-template pTemplate=\"item\" let-item>\n                        <div\n                          class=\"d-flex align-items-center py-2 w-100 h-100\"\n                          [pTooltip]=\"tooltip\"\n                        >\n                          <i [class]=\"item.value | iconSmClass\"></i>\n                          <div class=\"ms-3 text-truncate\">\n                            {{ item.label }}\n                          </div>\n                          <ng-template #tooltip>\n                            <lab-tooltip\n                              [id]=\"item.value\"\n                              type=\"belt\"\n                            ></lab-tooltip>\n                          </ng-template>\n                        </div>\n                      </ng-template>\n                      <ng-template #tooltip>\n                        <lab-tooltip [id]=\"beltId\" type=\"belt\"></lab-tooltip>\n                      </ng-template>\n                    </p-dropdown>\n                  } @else {\n                    @if (\n                      data().pipeIds.indexOf(beltId) !== -1 &&\n                        settings().pipeId;\n                      as defaultPipeId\n                    ) {\n                      <!-- Pipes dropdown -->\n                      <p-dropdown\n                        labDropdownBase=\"icon\"\n                        [pTooltip]=\"tooltip\"\n                        [ngModel]=\"beltId\"\n                        [options]=\"options().pipes\"\n                        (onChange)=\"\n                          setBelt(step.itemId, $event.value, defaultPipeId)\n                        \"\n                      >\n                        <ng-template pTemplate=\"selectedItem\" let-item>\n                          <div class=\"d-flex\">\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                          </div>\n                        </ng-template>\n                        <ng-template pTemplate=\"item\" let-item>\n                          <div\n                            class=\"d-flex align-items-center py-2 w-100 h-100\"\n                            [pTooltip]=\"tooltip\"\n                          >\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                            <div class=\"ms-3 text-truncate\">\n                              {{ item.label }}\n                            </div>\n                            <ng-template #tooltip>\n                              <lab-tooltip\n                                [id]=\"item.value\"\n                                type=\"pipe\"\n                              ></lab-tooltip>\n                            </ng-template>\n                          </div>\n                        </ng-template>\n                        <ng-template #tooltip>\n                          <lab-tooltip [id]=\"beltId\" type=\"pipe\"></lab-tooltip>\n                        </ng-template>\n                      </p-dropdown>\n                    } @else {\n                      <!-- Pipe icon only -->\n                      <i [class]=\"beltId | iconClass\" [pTooltip]=\"tooltip\">\n                        <ng-template #tooltip>\n                          <lab-tooltip [id]=\"beltId\" type=\"pipe\"></lab-tooltip>\n                        </ng-template>\n                      </i>\n                    }\n                  }\n                </div>\n              </td>\n            }\n          } @else {\n            <td colspan=\"2\"></td>\n          }\n        }\n        <!-- Wagons -->\n        @if (columnsState().wagons.show) {\n          @if (step.itemId && step.wagons) {\n            @if (itemsState()[step.itemId].wagonId; as wagonId) {\n              <td class=\"w-0 px-0 px-sm-2 text-end\">\n                <span class=\"monospace\">{{\n                  step.wagons | rate: columnsState().wagons.precision\n                }}</span>\n              </td>\n              <td class=\"px-0 pe-sm-2\">\n                <div class=\"d-flex align-items-center\">\n                  <!-- Cargo wagon dropdown -->\n                  @if (\n                    data().cargoWagonIds.indexOf(wagonId) !== -1 &&\n                      settings().cargoWagonId;\n                    as defaultCargoWagonId\n                  ) {\n                    <p-dropdown\n                      labDropdownBase=\"icon\"\n                      [pTooltip]=\"tooltip\"\n                      [ngModel]=\"wagonId\"\n                      [options]=\"options().cargoWagons\"\n                      (onChange)=\"\n                        setWagon(step.itemId, $event.value, defaultCargoWagonId)\n                      \"\n                    >\n                      <ng-template pTemplate=\"selectedItem\" let-item>\n                        @if (item) {\n                          <div class=\"d-flex\">\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                          </div>\n                        }\n                      </ng-template>\n                      <ng-template pTemplate=\"item\" let-item>\n                        <div\n                          class=\"d-flex align-items-center py-2 w-100 h-100\"\n                          [pTooltip]=\"tooltip\"\n                        >\n                          <i [class]=\"item.value | iconSmClass\"></i>\n                          <div class=\"ms-3 text-truncate\">\n                            {{ item.label }}\n                          </div>\n                          <ng-template #tooltip>\n                            <lab-tooltip\n                              [id]=\"item.value\"\n                              type=\"cargo-wagon\"\n                            ></lab-tooltip>\n                          </ng-template>\n                        </div>\n                      </ng-template>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"wagonId\"\n                          type=\"cargo-wagon\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </p-dropdown>\n                  } @else {\n                    <!-- Fluid wagon dropdown -->\n                    @if (\n                      data().fluidWagonIds.indexOf(wagonId) !== -1 &&\n                        settings().fluidWagonId;\n                      as defaultFluidWagonId\n                    ) {\n                      <p-dropdown\n                        labDropdownBase=\"icon\"\n                        [pTooltip]=\"tooltip\"\n                        [ngModel]=\"wagonId\"\n                        [options]=\"options().fluidWagons\"\n                        (onChange)=\"\n                          setWagon(\n                            step.itemId,\n                            $event.value,\n                            defaultFluidWagonId\n                          )\n                        \"\n                      >\n                        <ng-template pTemplate=\"selectedItem\" let-item>\n                          @if (item) {\n                            <div class=\"d-flex\">\n                              <i [class]=\"item.value | iconSmClass\"></i>\n                            </div>\n                          }\n                        </ng-template>\n                        <ng-template pTemplate=\"item\" let-item>\n                          <div\n                            class=\"d-flex align-items-center py-2 w-100 h-100\"\n                            [pTooltip]=\"tooltip\"\n                          >\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                            <div class=\"ms-3 text-truncate\">\n                              {{ item.label }}\n                            </div>\n                          </div>\n                          <ng-template #tooltip>\n                            <lab-tooltip\n                              [id]=\"item.value\"\n                              type=\"fluid-wagon\"\n                            ></lab-tooltip>\n                          </ng-template>\n                        </ng-template>\n                        <ng-template #tooltip>\n                          <lab-tooltip\n                            [id]=\"wagonId\"\n                            type=\"fluid-wagon\"\n                          ></lab-tooltip>\n                        </ng-template>\n                      </p-dropdown>\n                    }\n                  }\n                </div>\n              </td>\n            }\n          } @else {\n            <td colspan=\"2\"></td>\n          }\n        }\n        <!-- Machines -->\n        @if (step.recipeSettings?.machineId; as machineId) {\n          <td class=\"w-0 px-0 px-sm-2 text-end\">\n            @if (\n              step.machines &&\n              step.machines.nonzero() &&\n              (machineId | machineShowRate: data().game)\n            ) {\n              <span class=\"monospace\">{{\n                step.machines\n                  | machineRate: columnsState().machines.precision : machineId\n              }}</span>\n            }\n          </td>\n          <td class=\"px-0 pe-sm-2\">\n            @if (step.recipeId && step.recipe && step.recipeSettings) {\n              <div class=\"d-flex align-items-center\">\n                <span class=\"find-text\">{{ step.recipe.name }}</span>\n                @if (\n                  !preferences().hideDuplicateIcons ||\n                  (step.itemId != null && step.itemId !== step.recipeId)\n                ) {\n                  <button\n                    pButton\n                    pRipple\n                    type=\"button\"\n                    class=\"hover-action p-button-text\"\n                    [pTooltip]=\"tooltip\"\n                    (click)=\"\n                      addObjective({\n                        targetId: step.recipeId,\n                        unit: ObjectiveUnit.Machines\n                      })\n                    \"\n                  >\n                    <span\n                      class=\"p-button-icon\"\n                      [class]=\"step.recipeId | iconSmClass: 'recipe'\"\n                    >\n                      @if (step.recipeObjectiveId) {\n                        <span>#{{ step.recipeObjectiveId }}</span>\n                      }\n                    </span>\n                    <i class=\"hover-icon fa-solid fa-circle-plus\"></i>\n                    <ng-template #tooltip>\n                      <lab-tooltip\n                        [id]=\"step.recipeId\"\n                        type=\"recipe\"\n                      ></lab-tooltip>\n                    </ng-template>\n                  </button>\n                }\n                @if (machineId | machineShow: data().game) {\n                  <p-dropdown\n                    labDropdownBase=\"icon\"\n                    [pTooltip]=\"tooltip\"\n                    [options]=\"\n                      step.recipe.producers | options: data().itemEntities\n                    \"\n                    [ngModel]=\"machineId\"\n                    (onChange)=\"\n                      changeRecipeField(step, $event.value, 'machine')\n                    \"\n                  >\n                    <ng-template pTemplate=\"selectedItem\" let-item>\n                      @if (item) {\n                        <div class=\"d-flex\">\n                          <i [class]=\"item.value | iconSmClass\"></i>\n                        </div>\n                      }\n                    </ng-template>\n                    <ng-template pTemplate=\"item\" let-item>\n                      <div\n                        class=\"d-flex align-items-center py-2 w-100 h-100\"\n                        [pTooltip]=\"tooltip\"\n                      >\n                        <i [class]=\"item.value | iconSmClass\"></i>\n                        <div class=\"ms-3 text-truncate\">\n                          {{ item.label }}\n                        </div>\n                        <ng-template #tooltip>\n                          <lab-tooltip\n                            [id]=\"item.value\"\n                            type=\"machine\"\n                          ></lab-tooltip>\n                        </ng-template>\n                      </div>\n                    </ng-template>\n                    <ng-template #tooltip>\n                      <lab-tooltip\n                        [id]=\"machineId\"\n                        type=\"machine\"\n                      ></lab-tooltip>\n                    </ng-template>\n                  </p-dropdown>\n                }\n                @if (data().game === Game.Satisfactory) {\n                  <p-inputNumber\n                    #overclockInput\n                    suffix=\"%\"\n                    [min]=\"1\"\n                    [max]=\"250\"\n                    [step]=\"10\"\n                    [maxFractionDigits]=\"2\"\n                    [size]=\"3\"\n                    inputStyleClass=\"text-end\"\n                    [pTooltip]=\"'steps.overclockTooltip' | translate\"\n                    [ngModel]=\"step.recipeSettings.overclock\"\n                    (onBlur)=\"\n                      changeRecipeField(\n                        step,\n                        overclockInput.value ?? 100,\n                        'overclock'\n                      )\n                    \"\n                  >\n                  </p-inputNumber>\n                }\n                @if (step.recipeSettings?.fuelId; as fuelId) {\n                  @if (step.recipe.isBurn) {\n                    <div class=\"d-flex align-items-center\">\n                      <i\n                        class=\"padded\"\n                        [class]=\"fuelId | iconSmClass\"\n                        [pTooltip]=\"tooltip\"\n                      >\n                        <ng-template #tooltip>\n                          <lab-tooltip [id]=\"fuelId\" type=\"fuel\"></lab-tooltip>\n                        </ng-template>\n                      </i>\n                    </div>\n                  } @else if (step.recipeSettings.machineId) {\n                    <p-dropdown\n                      labDropdownBase=\"icon\"\n                      [pTooltip]=\"tooltip\"\n                      [ngModel]=\"fuelId\"\n                      [options]=\"step.recipeSettings.fuelOptions ?? []\"\n                      (onChange)=\"changeRecipeField(step, $event.value, 'fuel')\"\n                    >\n                      <ng-template pTemplate=\"selectedItem\" let-item>\n                        <div class=\"d-flex\">\n                          <i [class]=\"item.value | iconSmClass\"></i>\n                        </div>\n                      </ng-template>\n                      <ng-template pTemplate=\"item\" let-item>\n                        <div\n                          class=\"d-flex align-items-center py-2 w-100 h-100\"\n                          [pTooltip]=\"tooltip\"\n                        >\n                          <i [class]=\"item.value | iconSmClass\"></i>\n                          <div class=\"ms-3 text-truncate\">\n                            {{ item.label }}\n                          </div>\n                          <ng-template #tooltip>\n                            <lab-tooltip\n                              [id]=\"item.value\"\n                              type=\"fuel\"\n                            ></lab-tooltip>\n                          </ng-template>\n                        </div>\n                      </ng-template>\n                      <ng-template #tooltip>\n                        <lab-tooltip [id]=\"fuelId\" type=\"fuel\"></lab-tooltip>\n                      </ng-template>\n                    </p-dropdown>\n                  }\n                }\n                @if (step.recipeSettings?.modules; as modules) {\n                  @if (data().machineEntities[machineId]; as machine) {\n                    @if (machine.modules !== true && machine.modules?.isOne()) {\n                      <p-dropdown\n                        labDropdownBase=\"icon\"\n                        labNoDrag\n                        [pTooltip]=\"'settings.modifierTooltip' | translate\"\n                        [ngModel]=\"modules[0].id\"\n                        [options]=\"step.recipeSettings.moduleOptions ?? []\"\n                        (onChange)=\"\n                          changeRecipeField(\n                            step,\n                            [{ id: $event.value, count: rational(1) }],\n                            'modules'\n                          )\n                        \"\n                      >\n                        <ng-template pTemplate=\"selectedItem\" let-item>\n                          <div class=\"d-flex\">\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                          </div>\n                        </ng-template>\n                        <ng-template pTemplate=\"item\" let-item>\n                          <div\n                            class=\"d-flex align-items-center py-2 w-100 h-100\"\n                            [pTooltip]=\"\n                              item.value !== 'module' ? tooltip : undefined\n                            \"\n                          >\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                            <div class=\"ms-3 text-truncate\">\n                              {{ item.label }}\n                            </div>\n                            <ng-template #tooltip>\n                              <lab-tooltip\n                                [id]=\"item.value\"\n                                type=\"module\"\n                              ></lab-tooltip>\n                            </ng-template>\n                          </div>\n                        </ng-template>\n                      </p-dropdown>\n                    } @else if (machine.modules != null) {\n                      <button\n                        pButton\n                        pRipple\n                        type=\"button\"\n                        class=\"hover-action modules p-button-text\"\n                        [pTooltip]=\"tooltip\"\n                        (click)=\"\n                          modulePicker.show(\n                            $event,\n                            modules,\n                            machine,\n                            step.recipeId\n                          )\n                        \"\n                      >\n                        @for (module of modules; track module.id) {\n                          <i\n                            class=\"p-button-icon\"\n                            [class]=\"module.id | iconSmClass\"\n                            ><span>{{ module.count }}</span></i\n                          >\n                        }\n                        <i class=\"hover-icon fa-solid fa-gear\"></i>\n                      </button>\n                      <lab-modules-overlay\n                        #modulePicker\n                        (setValue)=\"changeRecipeField(step, $event, 'modules')\"\n                      ></lab-modules-overlay>\n                      <ng-template #tooltip>\n                        @for (module of modules; track module.id) {\n                          @if (module.id) {\n                            <lab-tooltip\n                              [id]=\"module.id\"\n                              type=\"module\"\n                            ></lab-tooltip>\n                          }\n                        }\n                      </ng-template>\n                    }\n                  }\n                }\n              </div>\n            }\n          </td>\n        } @else {\n          <td colspan=\"2\"></td>\n        }\n        <!-- Beacons -->\n        @if (columnsState().beacons.show) {\n          <td colspan=\"2\" class=\"px-0 px-sm-2\">\n            @if (\n              step.recipeId &&\n              step.recipeSettings &&\n              step.recipeSettings.beacons\n            ) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"hover-action icons p-button-text flex-column\"\n                [pTooltip]=\"tooltip\"\n                (click)=\"\n                  beaconsOverlay.show($event, step.recipeSettings.beacons)\n                \"\n              >\n                @for (beacon of step.recipeSettings.beacons; track $index) {\n                  <div class=\"d-flex\">\n                    <i class=\"p-button-icon\" [class]=\"beacon.id | iconSmClass\"\n                      ><span>{{ beacon.count }}</span></i\n                    >\n                    @if (beacon.total) {\n                      <i\n                        class=\"p-button-icon sum\"\n                        [class]=\"beacon.id | iconSmClass\"\n                        ><span>{{ beacon.total }}</span></i\n                      >\n                    }\n                    @for (module of beacon.modules; track module.id) {\n                      <i class=\"p-button-icon\" [class]=\"module.id | iconSmClass\"\n                        ><span>{{ module.count }}</span></i\n                      >\n                    }\n                  </div>\n                }\n                <i class=\"hover-icon fa-solid fa-gear\"></i>\n              </button>\n              <lab-beacons-overlay\n                #beaconsOverlay\n                (setValue)=\"changeRecipeField(step, $event, 'beacons')\"\n              ></lab-beacons-overlay>\n              <ng-template #tooltip>\n                @if (step.recipeSettings.beacons?.[0]?.id; as beaconId) {\n                  <lab-tooltip [id]=\"beaconId\" type=\"beacon\"></lab-tooltip>\n                }\n              </ng-template>\n            }\n          </td>\n        }\n        <!-- Power -->\n        @if (columnsState().power.show) {\n          <td class=\"px-0 px-sm-2 text-end\">\n            @if (step.power && step.power.nonzero()) {\n              <span class=\"monospace\">{{\n                step.power\n                  | power: columnsState().power.precision : effectivePowerUnit()\n              }}</span>\n            }\n          </td>\n        }\n        <!-- Pollution -->\n        @if (columnsState().pollution.show) {\n          <td class=\"px-0 px-sm-2 text-end\">\n            @if (step.pollution && step.pollution.nonzero()) {\n              <span class=\"monospace\">{{\n                step.pollution | rate: columnsState().pollution.precision\n              }}</span>\n            }\n          </td>\n        }\n        <!-- Link -->\n        @if (columnsState().link.show) {\n          <td class=\"w-0 px-0 ps-sm-1\">\n            <div class=\"d-flex\">\n              <a\n                class=\"text-decoration-none\"\n                target=\"_blank\"\n                [href]=\"step | stepHref: routerSvc.zipConfig() : data()\"\n              >\n                <button\n                  pButton\n                  pRipple\n                  type=\"button\"\n                  class=\"p-button-text p-button-rounded\"\n                  icon=\"fa-solid fa-arrow-up-right-from-square\"\n                  [pTooltip]=\"'steps.openNewTabTooltip' | translate\"\n                  tooltipPosition=\"left\"\n                ></button>\n              </a>\n              @if (\n                (step.recipeId && stepsModified().recipes[step.recipeId]) ||\n                (step.itemId && stepsModified().items[step.itemId]) ||\n                (step.recipeObjectiveId &&\n                  stepsModified().objectives[step.recipeObjectiveId])\n              ) {\n                <button\n                  pButton\n                  pRipple\n                  type=\"button\"\n                  class=\"p-button-text p-button-rounded\"\n                  icon=\"fa-solid fa-rotate-left\"\n                  [pTooltip]=\"'steps.stepUndoTooltip' | translate\"\n                  tooltipPosition=\"left\"\n                  (click)=\"resetStep(step)\"\n                ></button>\n              }\n            </div>\n          </td>\n        }\n      </tr>\n    }\n  </ng-template>\n  <ng-template pTemplate=\"rowexpansion\" let-_step>\n    <!-- Details row tab menu -->\n    @if (_step | asStep; as step) {\n      <tr class=\"detail\">\n        <td class=\"px-1\">\n          <a\n            class=\"text-decoration-none\"\n            routerLink=\".\"\n            [relativeTo]=\"route\"\n            queryParamsHandling=\"preserve\"\n            [fragment]=\"step.id\"\n          >\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-text p-button-rounded\"\n              icon=\"fa-solid fa-link\"\n            ></button>\n          </a>\n        </td>\n        <td colspan=\"100\">\n          <p-tabMenu\n            #expandTabMenu\n            [model]=\"stepDetails()[step.id].tabs\"\n            [activeItem]=\"activeItem[step | stepId]\"\n            (activeItemChange)=\"setActiveItem(step, $event)\"\n          >\n            <ng-template pTemplate=\"item\" let-item>\n              <a class=\"p-menuitem-link\" [id]=\"item.id\">\n                <span\n                  class=\"p-menuitem-icon\"\n                  [class]=\"$any(stepDetailIcon)[item.label]\"\n                ></span>\n                <span class=\"p-menuitem-text\">{{\n                  'options.stepDetailTab.' + item.label | translate\n                }}</span>\n              </a>\n            </ng-template>\n          </p-tabMenu>\n        </td>\n      </tr>\n      @switch (expandTabMenu.activeItem?.label) {\n        @case (StepDetailTab.Item) {\n          <!-- Item row details -->\n          @if (stepDetails()[step.id].outputs.length) {\n            <tr class=\"detail\">\n              <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n              <td colspan=\"100\" class=\"fw-bold\">\n                {{ 'steps.sources' | translate }}\n              </td>\n            </tr>\n          }\n          @for (output of stepDetails()[step.id].outputs; track $index) {\n            @if (step.itemId) {\n              <ng-container\n                *ngTemplateOutlet=\"\n                  detailRow;\n                  context: {\n                    items: step.items?.mul(output.value),\n                    itemId: step.itemId,\n                    belts: step.belts?.mul(output.value),\n                    beltId: itemsState()[step.itemId].beltId,\n                    wagons: step.wagons?.mul(output.value),\n                    wagonId: itemsState()[step.itemId].wagonId,\n                    machines: output.step?.machines,\n                    machineId: output.step?.recipeSettings?.machineId,\n                    recipeId: output.step?.recipeId,\n                    recipeObjectiveId: output.step?.recipeObjectiveId,\n                    percent: output.value,\n                    percentOnDest: true,\n                    destId: step.itemId,\n                    inputs: output.inputs\n                  }\n                \"\n              >\n              </ng-container>\n            }\n          }\n          @if (step.parents) {\n            <tr class=\"detail\">\n              <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n              <td colspan=\"100\" class=\"fw-bold\">\n                {{ 'steps.destinations' | translate }}\n              </td>\n            </tr>\n          }\n          @for (\n            parent of step.parents | keyvalue: trackSvc.sortByValue;\n            track parent.key\n          ) {\n            @if (step.itemId) {\n              <ng-container\n                *ngTemplateOutlet=\"\n                  detailRow;\n                  context: {\n                    items: step.items?.mul(parent.value),\n                    itemId: step.itemId,\n                    belts: step.belts?.mul(parent.value),\n                    beltId: itemsState()[step.itemId].beltId,\n                    wagons: step.wagons?.mul(parent.value),\n                    wagonId: itemsState()[step.itemId].wagonId,\n                    machines:\n                      stepDetails()[step.id].outputs.length === 1\n                        ? step.machines?.mul(parent.value)\n                        : null,\n                    machineId:\n                      stepDetails()[step.id].outputs.length === 1\n                        ? step.recipeSettings?.machineId\n                        : null,\n                    recipeId: step.recipeId,\n                    recipeObjectiveId: step.recipeObjectiveId,\n                    percent: parent.value,\n                    destId: stepById()[parent.key]?.recipeId,\n                    destRecipeObjectiveId:\n                      stepById()[parent.key]?.recipeObjectiveId,\n                    destIsRecipe: true,\n                    outputs: parent.key === ''\n                  }\n                \"\n              >\n              </ng-container>\n            }\n          }\n        }\n        @case (StepDetailTab.Recipe) {\n          <!-- Recipe row details -->\n          @if (step.recipe) {\n            @if (data().game === Game.Factorio && step.recipe.isMining) {\n              <tr class=\"detail\">\n                <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n                <td colspan=\"100\" class=\"fw-bold\">\n                  {{ 'steps.depletion' | translate }}\n                </td>\n              </tr>\n              @for (\n                output of step.outputs | keyvalue: trackSvc.sortByValue;\n                track output.key\n              ) {\n                @if (\n                  {\n                    step: stepByItemEntities()[output.key],\n                    percent: step.outputs?.[output.key]\n                  };\n                  as row\n                ) {\n                  @if (row.step && row.percent && row.step.items) {\n                    <ng-container\n                      *ngTemplateOutlet=\"\n                        detailRow;\n                        context: {\n                          items: row.step.items\n                            .mul(row.percent)\n                            .div(step.recipe.productivity),\n                          itemId: output.key\n                        }\n                      \"\n                    >\n                    </ng-container>\n                  }\n                }\n              }\n            }\n            @if ((step.recipe.in | keyvalue).length) {\n              <tr class=\"detail\">\n                <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n                <td colspan=\"100\" class=\"fw-bold\">\n                  {{ 'steps.inputs' | translate }}\n                </td>\n              </tr>\n              @for (\n                input of step.recipe.in | keyvalue: trackSvc.sortByValue;\n                track input.key\n              ) {\n                @if (\n                  {\n                    step: stepByItemEntities()[input.key],\n                    percent: stepByItemEntities()[input.key].parents?.[step.id]\n                  };\n                  as row\n                ) {\n                  @if (row.step.itemId && row.percent) {\n                    @if (\n                      stepDetails()[row.step.id].outputs.length === 1 &&\n                        stepDetails()[row.step.id].outputs[0];\n                      as output\n                    ) {\n                      <ng-container\n                        *ngTemplateOutlet=\"\n                          detailRow;\n                          context: {\n                            items: row.step.items?.mul(row.percent),\n                            itemId: input.key,\n                            belts: row.step.belts?.mul(row.percent),\n                            beltId: itemsState()[row.step.itemId].beltId,\n                            wagons: row.step.wagons?.mul(row.percent),\n                            wagonId: itemsState()[row.step.itemId].wagonId,\n                            machines: output.step?.machines,\n                            machineId: output.step?.recipeSettings?.machineId,\n                            recipeId: output.step?.recipeId,\n                            recipeObjectiveId: output.step?.recipeObjectiveId,\n                            percent: row.percent,\n                            destId: step.recipeId,\n                            destRecipeObjectiveId: step.recipeObjectiveId,\n                            destIsRecipe: true\n                          }\n                        \"\n                      >\n                      </ng-container>\n                    } @else {\n                      <ng-container\n                        *ngTemplateOutlet=\"\n                          detailRow;\n                          context: {\n                            items: row.step.items?.mul(row.percent),\n                            itemId: input.key,\n                            belts: row.step.belts?.mul(row.percent),\n                            beltId: itemsState()[row.step.itemId].beltId,\n                            wagons: row.step.wagons?.mul(row.percent),\n                            wagonId: itemsState()[row.step.itemId].wagonId,\n                            percent: row.percent,\n                            destId: step.recipeId,\n                            destRecipeObjectiveId: step.recipeObjectiveId,\n                            destIsRecipe: true\n                          }\n                        \"\n                      >\n                      </ng-container>\n                    }\n                  }\n                }\n              }\n            }\n            <tr class=\"detail\">\n              <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n              <td colspan=\"100\" class=\"fw-bold\">\n                {{ 'steps.time' | translate }}\n              </td>\n            </tr>\n            <tr class=\"detail\">\n              <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n              <td class=\"w-0 text-end\">\n                <span class=\"monospace\">{{\n                  step.recipe.time | rate: columnsState().items.precision\n                }}</span>\n              </td>\n              <td class=\"ps-0\">\n                <div class=\"d-flex\"><i class=\"lab-icon time\"></i></div>\n              </td>\n              <td colspan=\"100\"></td>\n            </tr>\n            <tr class=\"detail\">\n              <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n              <td colspan=\"100\" class=\"fw-bold\">\n                {{ 'steps.outputs' | translate }}\n              </td>\n            </tr>\n            @for (\n              output of step.recipe.out | keyvalue: trackSvc.sortByValue;\n              track output.key\n            ) {\n              @if (\n                {\n                  step: stepByItemEntities()[output.key],\n                  percent: step.outputs?.[output.key]\n                };\n                as row\n              ) {\n                @if (row.step.itemId && row.percent) {\n                  <ng-container\n                    *ngTemplateOutlet=\"\n                      detailRow;\n                      context: {\n                        items: row.step.items?.mul(row.percent),\n                        itemId: output.key,\n                        belts: row.step.belts?.mul(row.percent),\n                        beltId: itemsState()[row.step.itemId].beltId,\n                        wagons: row.step.wagons?.mul(row.percent),\n                        wagonId: itemsState()[row.step.itemId].wagonId,\n                        machines: step.machines,\n                        machineId: step.recipeSettings?.machineId,\n                        recipeId: step.recipeId,\n                        recipeObjectiveId: step.recipeObjectiveId,\n                        percent: row.percent,\n                        percentOnDest: true,\n                        destId: output.key,\n                        destRecipeObjectiveId: step.recipeObjectiveId\n                      }\n                    \"\n                  >\n                  </ng-container>\n                }\n              }\n            }\n          }\n        }\n        @case (StepDetailTab.Machine) {\n          <!-- Machine row details -->\n          <tr class=\"detail\">\n            <td></td>\n            <td colspan=\"100\">\n              @if (step.recipeId && step.recipe && step.machines) {\n                <div class=\"d-flex align-items-center\">\n                  <table class=\"mw-0\">\n                    @for (\n                      input of step.recipe.in | keyvalue: trackSvc.sortByValue;\n                      track input.key\n                    ) {\n                      @if (\n                        {\n                          step: stepByItemEntities()[input.key],\n                          percent:\n                            stepByItemEntities()[input.key].parents?.[step.id]\n                        };\n                        as row\n                      ) {\n                        @if (row.percent) {\n                          <tr>\n                            <td>\n                              @if (row.step.items) {\n                                <ng-container\n                                  *ngTemplateOutlet=\"\n                                    machineValueCell;\n                                    context: {\n                                      value:\n                                        row.step.items\n                                          .mul(row.percent)\n                                          .div(step.machines)\n                                        | rate: columnsState().items.precision,\n                                      itemId: input.key\n                                    }\n                                  \"\n                                >\n                                </ng-container>\n                              }\n                            </td>\n                            @if (columnsState().belts.show) {\n                              <td>\n                                @if (row.step.belts) {\n                                  @if (\n                                    itemsState()[input.key].beltId;\n                                    as beltId\n                                  ) {\n                                    <ng-container\n                                      *ngTemplateOutlet=\"\n                                        machineValueCell;\n                                        context: {\n                                          value:\n                                            row.step.belts\n                                              .mul(row.percent)\n                                              .div(step.machines)\n                                            | rate\n                                              : columnsState().belts.precision,\n                                          itemId: beltId\n                                        }\n                                      \"\n                                    >\n                                    </ng-container>\n                                  }\n                                }\n                              </td>\n                            }\n                            @if (data().game === Game.Factorio) {\n                              <td>\n                                @if (\n                                  itemsState()[input.key].beltId !==\n                                    ItemId.Pipe && row.step.items\n                                ) {\n                                  @if (\n                                    row.step.items\n                                      .mul(row.percent)\n                                      .div(step.machines)\n                                      .div(dispRateInfo().value)\n                                      | inserterSpeed: settings();\n                                    as ins\n                                  ) {\n                                    <ng-container\n                                      *ngTemplateOutlet=\"\n                                        machineValueCell;\n                                        context: {\n                                          value: ins.value | rate: 1,\n                                          itemId: ins.id\n                                        }\n                                      \"\n                                    >\n                                    </ng-container>\n                                  }\n                                }\n                              </td>\n                            }\n                          </tr>\n                        }\n                      }\n                    }\n                  </table>\n                  <i class=\"fa-solid fa-arrow-right mx-3\"></i>\n                  <table class=\"mw-0\">\n                    <tr>\n                      <td class=\"w-0 text-end\">\n                        <span class=\"monospace\">{{\n                          rational(1) | rate: columnsState().machines.precision\n                        }}</span>\n                      </td>\n                      <td>\n                        @if (step.recipeSettings?.machineId; as machineId) {\n                          <div class=\"d-flex align-items-center\">\n                            <i\n                              [class]=\"step.recipeId | iconClass: 'recipe'\"\n                              [pTooltip]=\"tooltip\"\n                            >\n                              <ng-template #tooltip>\n                                <lab-tooltip [id]=\"step.recipeId\" type=\"recipe\">\n                                </lab-tooltip>\n                              </ng-template>\n                            </i>\n                            <i\n                              [class]=\"machineId | iconClass\"\n                              [pTooltip]=\"tooltip\"\n                            >\n                              <ng-template #tooltip>\n                                <lab-tooltip\n                                  [id]=\"machineId\"\n                                  type=\"machine\"\n                                ></lab-tooltip>\n                              </ng-template>\n                            </i>\n                          </div>\n                        }\n                      </td>\n                    </tr>\n                    <tr>\n                      <td class=\"w-0 text-end\">\n                        <span class=\"monospace\">{{\n                          dispRateInfo().value\n                            | rate: columnsState().machines.precision\n                        }}</span>\n                      </td>\n                      <td><i class=\"lab-icon time\"></i></td>\n                    </tr>\n                  </table>\n                  <i class=\"fa-solid fa-arrow-right mx-3\"></i>\n                  <table class=\"mw-0\">\n                    @for (\n                      output of step.recipe.out\n                        | keyvalue: trackSvc.sortByValue;\n                      track output.key\n                    ) {\n                      @if (output.value.div(step.recipe.time); as items) {\n                        <tr>\n                          @if (data().game === Game.Factorio) {\n                            <td>\n                              @if (\n                                itemsState()[output.key].beltId !== ItemId.Pipe\n                              ) {\n                                @if (\n                                  items | inserterSpeed: settings();\n                                  as ins\n                                ) {\n                                  <ng-container\n                                    *ngTemplateOutlet=\"\n                                      machineValueCell;\n                                      context: {\n                                        value: ins.value | rate: 1,\n                                        itemId: ins.id\n                                      }\n                                    \"\n                                  >\n                                  </ng-container>\n                                }\n                              }\n                            </td>\n                          }\n                          @if (columnsState().belts.show) {\n                            <td>\n                              @if (itemsState()[output.key].beltId; as beltId) {\n                                <ng-container\n                                  *ngTemplateOutlet=\"\n                                    machineValueCell;\n                                    context: {\n                                      value:\n                                        items.div(beltSpeed()[beltId])\n                                        | rate: columnsState().belts.precision,\n                                      itemId: beltId\n                                    }\n                                  \"\n                                >\n                                </ng-container>\n                              }\n                            </td>\n                          }\n                          <td>\n                            <ng-container\n                              *ngTemplateOutlet=\"\n                                machineValueCell;\n                                context: {\n                                  value:\n                                    items.mul(dispRateInfo().value)\n                                    | rate: columnsState().items.precision,\n                                  itemId: output.key\n                                }\n                              \"\n                            >\n                            </ng-container>\n                          </td>\n                        </tr>\n                      }\n                    }\n                  </table>\n                  <ng-template\n                    #machineValueCell\n                    let-value=\"value\"\n                    let-itemId=\"itemId\"\n                  >\n                    <div class=\"d-flex align-items-center justify-content-end\">\n                      <span class=\"monospace\">{{ value }}</span>\n                      <i [class]=\"itemId | iconClass\" [pTooltip]=\"tooltip\">\n                        <ng-template #tooltip>\n                          <lab-tooltip [id]=\"itemId\"></lab-tooltip>\n                        </ng-template>\n                      </i>\n                    </div>\n                  </ng-template>\n                </div>\n              }\n              @if (data().game === Game.Factorio) {\n                <small\n                  [innerHTML]=\"'steps.inserterCountInfo' | translate\"\n                ></small>\n              }\n            </td>\n          </tr>\n        }\n        @case (StepDetailTab.Recipes) {\n          <!-- Recipes row details -->\n          @if (step.itemId && stepDetails()[step.id]; as stepDetails) {\n            <tr class=\"detail\">\n              <td></td>\n              <td colspan=\"100\">\n                <div>\n                  <div class=\"fw-bold\">\n                    {{ 'steps.includedRecipes' | translate }}\n                  </div>\n                  <div class=\"mb-2\">\n                    <small>{{ 'steps.includedRecipesInfo' | translate }}</small>\n                  </div>\n                  <p-checkbox\n                    [ngModel]=\"stepDetails.allRecipesIncluded\"\n                    [binary]=\"true\"\n                    [label]=\"'picker.includeAll' | translate\"\n                    (onChange)=\"\n                      toggleRecipes(\n                        stepDetails.recipeIds,\n                        stepDetails.allRecipesIncluded,\n                        data()\n                      )\n                    \"\n                  ></p-checkbox>\n                </div>\n              </td>\n            </tr>\n            <tr class=\"detail\">\n              <td></td>\n              <td colspan=\"100\">\n                <div class=\"d-flex flex-wrap\">\n                  @for (recipeId of stepDetails.recipeIds; track recipeId) {\n                    <button\n                      pButton\n                      pRipple\n                      type=\"button\"\n                      class=\"p-button-text hover-action me-2\"\n                      [class.hover-active]=\"recipesState()[recipeId].excluded\"\n                      [icon]=\"recipeId | iconSmClass: 'recipe'\"\n                      [pTooltip]=\"tooltip\"\n                      (click)=\"toggleRecipe(recipeId, recipesState(), data())\"\n                    >\n                      <i class=\"hover-icon fa-solid fa-eye-slash\"></i>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"recipeId\"\n                          type=\"recipe\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </button>\n                  }\n                </div>\n              </td>\n            </tr>\n          }\n        }\n      }\n    }\n  </ng-template>\n  <ng-template pTemplate=\"emptymessage\">\n    @if (focus()) {\n      <tr>\n        <td colspan=\"100\">\n          <div class=\"d-flex justify-content-center\">\n            <span>{{ 'steps.emptyMessage' | translate }}</span>\n          </div>\n        </td>\n      </tr>\n    }\n  </ng-template>\n  <ng-template #emptyCol2>\n    <td colspan=\"2\"></td>\n  </ng-template>\n  <ng-template #leftPad>\n    <td></td>\n    @if (!focus()) {\n      @if (columnsState().checkbox.show) {\n        <td></td>\n      }\n      @if (columnsState().tree.show) {\n        <td></td>\n      }\n    }\n  </ng-template>\n  <ng-template\n    #detailRow\n    let-items=\"items\"\n    let-itemId=\"itemId\"\n    let-belts=\"belts\"\n    let-beltId=\"beltId\"\n    let-wagons=\"wagons\"\n    let-wagonId=\"wagonId\"\n    let-machines=\"machines\"\n    let-machineId=\"machineId\"\n    let-recipeId=\"recipeId\"\n    let-recipeObjectiveId=\"recipeObjectiveId\"\n    let-percent=\"percent\"\n    let-percentOnDest=\"percentOnDest\"\n    let-destId=\"destId\"\n    let-destRecipeObjectiveId=\"destRecipeObjectiveId\"\n    let-destIsRecipe=\"destIsRecipe\"\n    let-inputs=\"inputs\"\n    let-outputs=\"outputs\"\n  >\n    <tr class=\"detail\">\n      @if (itemId) {\n        <ng-container *ngTemplateOutlet=\"leftPad\"></ng-container>\n        <td class=\"w-0 text-end\">\n          <span class=\"monospace\">{{\n            items | rate: columnsState().items.precision\n          }}</span>\n        </td>\n        <td class=\"ps-0\">\n          <div class=\"d-flex\">\n            <i [class]=\"itemId | iconClass\" [pTooltip]=\"tooltip\">\n              <ng-template #tooltip>\n                <lab-tooltip [id]=\"itemId\"></lab-tooltip>\n              </ng-template>\n            </i>\n          </div>\n        </td>\n        @if (columnsState().belts.show && belts && beltId) {\n          <td class=\"w-0 text-end\">\n            <span class=\"monospace\">{{\n              belts | rate: columnsState().belts.precision\n            }}</span>\n          </td>\n          <td class=\"ps-0\">\n            <div class=\"d-flex\">\n              <i [class]=\"beltId | iconClass\" [pTooltip]=\"tooltip\">\n                <ng-template #tooltip>\n                  <lab-tooltip [id]=\"beltId\" type=\"belt\"></lab-tooltip>\n                </ng-template>\n              </i>\n            </div>\n          </td>\n        }\n        @if (columnsState().wagons.show && wagons && wagonId) {\n          <td class=\"w-0 text-end\">\n            <span class=\"monospace\">{{\n              wagons | rate: columnsState().wagons.precision\n            }}</span>\n          </td>\n          <td class=\"ps-0\">\n            <div class=\"d-flex\">\n              @if (data().cargoWagonIds.indexOf(wagonId) !== -1) {\n                <i [class]=\"wagonId | iconClass\" [pTooltip]=\"tooltip\">\n                  <ng-template #tooltip>\n                    <lab-tooltip\n                      [id]=\"wagonId\"\n                      type=\"cargo-wagon\"\n                    ></lab-tooltip>\n                  </ng-template>\n                </i>\n              } @else {\n                <i [class]=\"wagonId | iconClass\" [pTooltip]=\"tooltip\">\n                  <ng-template #tooltip>\n                    <lab-tooltip\n                      [id]=\"wagonId\"\n                      type=\"fluid-wagon\"\n                    ></lab-tooltip>\n                  </ng-template>\n                </i>\n              }\n            </div>\n          </td>\n        }\n        <td class=\"w-0 text-end\">\n          @if (\n            machines &&\n            machines.nonzero() &&\n            (machineId | machineShowRate: data().game)\n          ) {\n            <span class=\"monospace\">{{\n              machines\n                | machineRate: columnsState().machines.precision : machineId\n            }}</span>\n          }\n        </td>\n        <td class=\"p-0\" colspan=\"100\">\n          <div class=\"d-flex align-items-center\">\n            @if (inputs) {\n              <div class=\"position-absolute\">\n                {{ 'steps.inputs' | translate }}\n              </div>\n            }\n            @if (machineId | machineShow: data().game) {\n              <i [class]=\"recipeId | iconClass: 'recipe'\" [pTooltip]=\"tooltip\">\n                @if (recipeObjectiveId) {\n                  <span>#{{ recipeObjectiveId }}</span>\n                }\n                <ng-template #tooltip>\n                  <lab-tooltip [id]=\"recipeId\" type=\"recipe\"></lab-tooltip>\n                </ng-template>\n              </i>\n              <i [class]=\"machineId | iconClass\" [pTooltip]=\"tooltip\">\n                <ng-template #tooltip>\n                  <lab-tooltip [id]=\"machineId\" type=\"machine\"></lab-tooltip>\n                </ng-template>\n              </i>\n            } @else {\n              <div class=\"d-flex invisible\">\n                <i class=\"lab-icon\"></i>\n              </div>\n              <div class=\"d-flex invisible\">\n                <i class=\"lab-icon\"></i>\n              </div>\n            }\n            @if (percent) {\n              @if (percentOnDest) {\n                <i class=\"m-1 p-2 fa-solid fa-arrow-right\"></i>\n              }\n              <span class=\"monospace\">{{ percent | rate: -2 | leftPad }}%</span>\n              @if (!percentOnDest) {\n                <i class=\"m-1 p-2 fa-solid fa-arrow-right\"></i>\n              }\n              @if (destId) {\n                <i\n                  [class]=\"\n                    destId | iconClass: (destIsRecipe ? 'recipe' : 'item')\n                  \"\n                  [pTooltip]=\"tooltip\"\n                >\n                  @if (destRecipeObjectiveId) {\n                    <span>#{{ destRecipeObjectiveId }}</span>\n                  }\n                  <ng-template #tooltip>\n                    <lab-tooltip\n                      [id]=\"destId\"\n                      [type]=\"destIsRecipe ? 'recipe' : 'item'\"\n                    ></lab-tooltip>\n                  </ng-template>\n                </i>\n              }\n              @if (outputs) {\n                <span>\n                  {{ 'steps.outputs' | translate }}\n                </span>\n              }\n            }\n          </div>\n        </td>\n      }\n    </tr>\n  </ng-template>\n  <ng-template pTemplate=\"footer\">\n    @if (!focus()) {\n      <tr>\n        <td></td>\n        @if (columnsState().checkbox.show) {\n          <td></td>\n        }\n        @if (columnsState().tree.show) {\n          <td></td>\n        }\n        <td colspan=\"2\">\n          {{ 'steps.total' | translate }}\n        </td>\n        <ng-container\n          *ngTemplateOutlet=\"\n            totalCell;\n            context: {\n              columnSettings: columnsState().belts,\n              totals: totals().belts,\n              type: 'belt'\n            }\n          \"\n        >\n        </ng-container>\n        <ng-container\n          *ngTemplateOutlet=\"\n            totalCell;\n            context: {\n              columnSettings: columnsState().wagons,\n              totals: totals().wagons\n            }\n          \"\n        >\n        </ng-container>\n        <ng-container\n          *ngTemplateOutlet=\"\n            totalCell;\n            context: {\n              columnSettings: columnsState().machines,\n              totals: totals().machines,\n              modulesTotals: totals().modules,\n              type: 'machine'\n            }\n          \"\n        >\n        </ng-container>\n        <ng-container\n          *ngTemplateOutlet=\"\n            totalCell;\n            context: {\n              columnSettings: columnsState().beacons,\n              totals: totals().beacons,\n              modulesTotals: totals().beaconModules,\n              type: 'beacon'\n            }\n          \"\n        >\n        </ng-container>\n        @if (columnsState().power.show) {\n          <td class=\"text-end inherit\">\n            <span class=\"monospace\">{{\n              totals().power\n                | power: columnsState().power.precision : effectivePowerUnit()\n            }}</span>\n          </td>\n        }\n        @if (columnsState().pollution.show) {\n          <td class=\"text-end inherit\">\n            <span class=\"monospace\">{{\n              totals().pollution | rate: columnsState().pollution.precision\n            }}</span>\n          </td>\n        }\n        @if (columnsState().link.show) {\n          <td></td>\n        }\n      </tr>\n    }\n    <ng-template\n      #totalCell\n      let-columnSettings=\"columnSettings\"\n      let-totals=\"totals\"\n      let-type=\"type\"\n      let-modulesTotals=\"modulesTotals\"\n    >\n      @if (columnSettings.show) {\n        <td class=\"w-0 text-end inherit\">\n          @for (tot of totals | keyvalue: trackSvc.sortByValue; track tot.key) {\n            <div class=\"py-2 icon-height\">\n              <span class=\"monospace\">{{\n                tot.value | rate: columnSettings.precision\n              }}</span>\n            </div>\n          }\n        </td>\n        <td class=\"ps-0 inherit\">\n          <div class=\"d-flex\">\n            <div class=\"d-flex flex-column justify-content-center\">\n              @for (\n                tot of totals | keyvalue: trackSvc.sortByValue;\n                track tot.key\n              ) {\n                @if (data().itemEntities[tot.key]) {\n                  <i\n                    class=\"d-block\"\n                    [class]=\"tot.key | iconClass\"\n                    [pTooltip]=\"tooltip\"\n                  >\n                    <ng-template #tooltip>\n                      <lab-tooltip [id]=\"tot.key\" [type]=\"type\"></lab-tooltip>\n                    </ng-template>\n                  </i>\n                } @else {\n                  <i\n                    class=\"d-block\"\n                    [class]=\"tot.key | iconClass: 'recipe'\"\n                    [pTooltip]=\"tooltip\"\n                  >\n                    <ng-template #tooltip>\n                      <lab-tooltip [id]=\"tot.key\" type=\"recipe\"></lab-tooltip>\n                    </ng-template>\n                  </i>\n                }\n              }\n            </div>\n            <div class=\"modules-column\">\n              @for (\n                tot of modulesTotals | keyvalue: trackSvc.sortByValue;\n                track tot.key\n              ) {\n                <div class=\"p-2 icon-height text-end\">\n                  <span class=\"monospace\">{{ tot.value }}</span>\n                </div>\n                <i\n                  class=\"d-block\"\n                  [class]=\"tot.key | iconClass: 'item'\"\n                  [pTooltip]=\"tot.key !== 'module' ? tooltip : undefined\"\n                >\n                  <ng-template #tooltip>\n                    <lab-tooltip [id]=\"tot.key\" type=\"module\"></lab-tooltip>\n                  </ng-template>\n                </i>\n              }\n            </div>\n          </div>\n        </td>\n      }\n    </ng-template>\n  </ng-template>\n</p-table>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Message } from 'primeng/api';\nimport { first } from 'rxjs';\n\nimport { PickerComponent } from '~/components/picker/picker.component';\nimport {\n  AdjustedDataset,\n  DisplayRate,\n  displayRateOptions,\n  MatrixResult,\n  MaximizeType,\n  Objective,\n  ObjectiveBase,\n  ObjectiveType,\n  objectiveTypeOptions,\n  ObjectiveUnit,\n  rational,\n  Rational,\n  SimplexResultType,\n} from '~/models';\nimport { ContentService, TrackService } from '~/services';\nimport {\n  Items,\n  LabState,\n  Objectives,\n  Preferences,\n  Recipes,\n  Settings,\n} from '~/store';\nimport { RateUtility } from '~/utilities';\n\n@Component({\n  selector: 'lab-objectives',\n  templateUrl: './objectives.component.html',\n  styleUrls: ['./objectives.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ObjectivesComponent {\n  store = inject(Store<LabState>);\n  translateSvc = inject(TranslateService);\n  contentSvc = inject(ContentService);\n  trackSvc = inject(TrackService);\n\n  _objectives = this.store.selectSignal(Objectives.getObjectives);\n  result = this.store.selectSignal(Objectives.getMatrixResult);\n  itemsState = this.store.selectSignal(Items.getItemsState);\n  recipesState = this.store.selectSignal(Recipes.getRecipesState);\n  itemIds = this.store.selectSignal(Recipes.getAvailableItems);\n  data = this.store.selectSignal(Recipes.getAdjustedDataset);\n  maximizeType = this.store.selectSignal(Settings.getMaximizeType);\n  beltSpeed = this.store.selectSignal(Settings.getBeltSpeed);\n  dispRateInfo = this.store.selectSignal(Settings.getDisplayRateInfo);\n  rateUnitOptions = this.store.selectSignal(Settings.getObjectiveUnitOptions);\n  recipeIds = this.store.selectSignal(Settings.getAvailableRecipes);\n  paused = this.store.selectSignal(Preferences.getPaused);\n  convertObjectiveValues = this.store.selectSignal(\n    Preferences.getConvertObjectiveValues,\n  );\n  objectives = computed(() => [...this._objectives()]);\n  messages = computed(() =>\n    this.getMessages(\n      this._objectives(),\n      this.result(),\n      this.itemsState(),\n      this.recipesState(),\n    ),\n  );\n\n  objectiveTypeOptions = objectiveTypeOptions;\n  displayRateOptions = displayRateOptions;\n\n  MaximizeType = MaximizeType;\n  ObjectiveUnit = ObjectiveUnit;\n  ObjectiveType = ObjectiveType;\n\n  getMessages(\n    objectives: Objective[],\n    matrixResult: MatrixResult,\n    itemsState: Items.ItemsState,\n    recipesState: Recipes.RecipesState,\n  ): Message[] {\n    if (matrixResult.resultType === SimplexResultType.Paused)\n      return [\n        {\n          severity: 'info',\n          detail: this.translateSvc.instant('objectives.pausedMessage'),\n        },\n      ];\n\n    if (matrixResult.resultType !== SimplexResultType.Failed) return [];\n\n    if (matrixResult.simplexStatus === 'unbounded') {\n      const maxObjectives = objectives.filter(\n        (o) => o.type === ObjectiveType.Maximize,\n      );\n\n      if (\n        maxObjectives.length &&\n        objectives.every((o) => o.type !== ObjectiveType.Limit)\n      ) {\n        // Found maximize objectives but no limits\n        return this.buildErrorMessages(\n          'objectives.errorUnbounded',\n          'objectives.errorNoLimits',\n          matrixResult,\n        );\n      }\n\n      if (\n        maxObjectives.some((o) =>\n          o.unit === ObjectiveUnit.Machines\n            ? recipesState[o.targetId].excluded\n            : itemsState[o.targetId].excluded,\n        )\n      ) {\n        // Found an excluded maximize objective\n        return this.buildErrorMessages(\n          'objectives.errorUnbounded',\n          'objectives.errorMaximizeExcluded',\n          matrixResult,\n        );\n      }\n\n      return this.buildErrorMessages(\n        'objectives.errorUnbounded',\n        'objectives.errorUnboundedDetail',\n        matrixResult,\n      );\n    } else if (matrixResult.simplexStatus === 'no_feasible') {\n      return this.buildErrorMessages(\n        'objectives.errorInfeasible',\n        'objectives.errorInfeasibleDetail',\n        matrixResult,\n      );\n    } else {\n      return this.buildErrorMessages(\n        'objectives.error',\n        'objectives.errorDetail',\n        matrixResult,\n      );\n    }\n  }\n\n  buildErrorMessages(\n    summary: string,\n    detail: string,\n    matrixResult: MatrixResult,\n  ): Message[] {\n    return [\n      {\n        severity: 'error',\n        summary: this.translateSvc.instant(summary),\n        detail: `${this.translateSvc.instant(\n          detail,\n        )} ${this.translateSvc.instant('objectives.errorSimplexInfo', {\n          returnCode: matrixResult.returnCode ?? 'unknown',\n          simplexStatus: matrixResult.simplexStatus ?? 'unknown',\n        })}`,\n      },\n    ];\n  }\n\n  setObjectiveOrder(objectives: Objective[]): void {\n    this.setOrder(objectives.map((o) => o.id));\n  }\n\n  changeUnit(\n    objective: Objective,\n    unit: ObjectiveUnit,\n    chooseItemPicker: PickerComponent,\n    chooseRecipePicker: PickerComponent,\n  ): void {\n    const data = this.data();\n    if (unit === ObjectiveUnit.Machines) {\n      if (objective.unit !== ObjectiveUnit.Machines) {\n        const recipeIds = data.itemRecipeIds[objective.targetId];\n        const updateFn = (recipeId: string): void =>\n          this.convertItemsToMachines(objective, recipeId, data);\n        if (recipeIds.length === 1) {\n          updateFn(recipeIds[0]);\n        } else {\n          chooseRecipePicker.selectId\n            .pipe(first())\n            .subscribe((targetId) => updateFn(targetId));\n          chooseRecipePicker.clickOpen('recipe', recipeIds);\n        }\n      }\n    } else {\n      if (objective.unit === ObjectiveUnit.Machines) {\n        const itemIds = Array.from(\n          data.adjustedRecipe[objective.targetId].produces,\n        );\n        const updateFn = (itemId: string): void =>\n          this.convertMachinesToItems(objective, itemId, unit, data);\n\n        if (itemIds.length === 1) {\n          updateFn(itemIds[0]);\n        } else {\n          chooseItemPicker.selectId\n            .pipe(first())\n            .subscribe((itemId) => updateFn(itemId));\n          chooseItemPicker.clickOpen('item', itemIds);\n        }\n      } else {\n        // No target conversion required\n        this.convertItemsToItems(objective, objective.targetId, unit, data);\n      }\n    }\n  }\n\n  /**\n   * Update unit field (non-machines -> machines), then convert and update\n   * objective value so that number of items remains constant\n   */\n  convertItemsToMachines(\n    objective: Objective,\n    recipeId: string,\n    data: AdjustedDataset,\n  ): void {\n    this.setUnit(objective.id, {\n      targetId: recipeId,\n      unit: ObjectiveUnit.Machines,\n    });\n\n    if (\n      !this.convertObjectiveValues() ||\n      objective.type === ObjectiveType.Maximize\n    )\n      return;\n\n    const itemsState = this.itemsState();\n    const beltSpeed = this.beltSpeed();\n    const dispRateInfo = this.dispRateInfo();\n    const oldValue = RateUtility.objectiveNormalizedRate(\n      objective,\n      itemsState,\n      beltSpeed,\n      dispRateInfo,\n      data,\n    );\n    const recipe = data.adjustedRecipe[recipeId];\n    const newValue = oldValue.div(recipe.output[objective.targetId]);\n    this.setValue(objective.id, newValue);\n  }\n\n  /**\n   * Update unit field (machines -> non-machines), then convert and update\n   * objective value so that number of items remains constant\n   */\n  convertMachinesToItems(\n    objective: Objective,\n    itemId: string,\n    unit: ObjectiveUnit,\n    data: AdjustedDataset,\n  ): void {\n    this.setUnit(objective.id, {\n      targetId: itemId,\n      unit,\n    });\n\n    if (\n      !this.convertObjectiveValues() ||\n      objective.type === ObjectiveType.Maximize ||\n      objective.recipe == null\n    )\n      return;\n\n    const itemsState = this.itemsState();\n    const beltSpeed = this.beltSpeed();\n    const dispRateInfo = this.dispRateInfo();\n    const factor = RateUtility.objectiveNormalizedRate(\n      {\n        id: '',\n        targetId: itemId,\n        value: rational(1n),\n        unit,\n        type: ObjectiveType.Output,\n      },\n      itemsState,\n      beltSpeed,\n      dispRateInfo,\n      data,\n    );\n    const oldValue = objective.value.mul(objective.recipe.output[itemId]);\n    const newValue = oldValue.div(factor);\n    this.setValue(objective.id, newValue);\n  }\n\n  /**\n   * Update unit field (non-machines -> non-machines), then convert and update\n   * objective value so that number of items remains constant\n   */\n  convertItemsToItems(\n    objective: Objective,\n    itemId: string,\n    unit: ObjectiveUnit,\n    data: AdjustedDataset,\n  ): void {\n    this.setUnit(objective.id, {\n      targetId: itemId,\n      unit,\n    });\n\n    if (\n      !this.convertObjectiveValues() ||\n      objective.type === ObjectiveType.Maximize\n    )\n      return;\n\n    const itemsState = this.itemsState();\n    const beltSpeed = this.beltSpeed();\n    const dispRateInfo = this.dispRateInfo();\n    const oldValue = RateUtility.objectiveNormalizedRate(\n      objective,\n      itemsState,\n      beltSpeed,\n      dispRateInfo,\n      data,\n    );\n    const factor = RateUtility.objectiveNormalizedRate(\n      {\n        id: '',\n        targetId: itemId,\n        value: rational(1n),\n        unit,\n        type: ObjectiveType.Output,\n      },\n      itemsState,\n      beltSpeed,\n      dispRateInfo,\n      data,\n    );\n    const newValue = oldValue.div(factor);\n    this.setValue(objective.id, newValue);\n  }\n\n  addItemObjective(targetId: string): void {\n    this.addObjective({ targetId, unit: ObjectiveUnit.Items });\n  }\n\n  addRecipeObjective(targetId: string): void {\n    this.addObjective({ targetId, unit: ObjectiveUnit.Machines });\n  }\n\n  addRecipeLimit(targetId: string): void {\n    this.addObjective({\n      targetId,\n      unit: ObjectiveUnit.Machines,\n      type: ObjectiveType.Limit,\n    });\n  }\n\n  /** Action Dispatch Methods */\n  removeObjective(id: string): void {\n    this.store.dispatch(new Objectives.RemoveAction(id));\n  }\n\n  setOrder(ids: string[]): void {\n    this.store.dispatch(new Objectives.SetOrderAction(ids));\n  }\n\n  setTarget(id: string, value: string): void {\n    this.store.dispatch(new Objectives.SetTargetAction({ id, value }));\n  }\n\n  setValue(id: string, value: Rational): void {\n    this.store.dispatch(new Objectives.SetValueAction({ id, value }));\n  }\n\n  setUnit(id: string, value: ObjectiveBase): void {\n    this.store.dispatch(new Objectives.SetUnitAction({ id, value }));\n  }\n\n  setType(id: string, value: ObjectiveType): void {\n    this.store.dispatch(new Objectives.SetTypeAction({ id, value }));\n  }\n\n  addObjective(value: ObjectiveBase): void {\n    this.store.dispatch(new Objectives.AddAction(value));\n  }\n\n  setDisplayRate(value: DisplayRate, prev: DisplayRate): void {\n    this.store.dispatch(new Settings.SetDisplayRateAction({ value, prev }));\n  }\n\n  setPaused(value: boolean): void {\n    this.store.dispatch(new Preferences.SetPausedAction(value));\n  }\n}\n", "<p-card [header]=\"'objectives.title' | translate\">\n  <div class=\"objectives-content\">\n    <p-orderList\n      [value]=\"objectives()\"\n      [dragdrop]=\"true\"\n      [trackBy]=\"trackSvc.trackById\"\n      (onReorder)=\"setObjectiveOrder(objectives())\"\n    >\n      <ng-template pTemplate=\"item\" let-objective let-i=\"index\">\n        <div class=\"p-inputgroup\">\n          <button\n            pButton\n            pRipple\n            type=\"button\"\n            class=\"p-button-outlined border-end-0 cursor-grab\"\n            icon=\"fa-solid fa-grip-lines\"\n          ></button>\n          @if (objective.unit === ObjectiveUnit.Machines) {\n            <button\n              pButton\n              pRipple\n              labNoDrag\n              type=\"button\"\n              class=\"p-button-outlined lab-button-icon-only text-truncate\"\n              [pTooltip]=\"'objectives.selectARecipe' | translate\"\n              tooltipPosition=\"top\"\n              (click)=\"\n                editRecipePicker.clickOpen(\n                  'recipe',\n                  recipeIds(),\n                  objective.targetId\n                )\n              \"\n            >\n              <i\n                class=\"p-button-icon\"\n                [class]=\"objective.targetId | iconSmClass: 'recipe'\"\n                ><span>#{{ objective.id }}</span></i\n              >\n              @if (!contentSvc.isMobile()) {\n                <span class=\"p-button-label\">{{\n                  data().recipeEntities[objective.targetId].name\n                }}</span>\n              }\n            </button>\n            <lab-picker\n              #editRecipePicker\n              [header]=\"'objectives.selectARecipe' | translate\"\n              (selectId)=\"setTarget(objective.id, $event)\"\n            ></lab-picker>\n          } @else {\n            <button\n              labNoDrag\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined text-truncate\"\n              [icon]=\"objective.targetId | iconSmClass\"\n              [label]=\"\n                contentSvc.isMobile()\n                  ? ''\n                  : data().itemEntities[objective.targetId].name\n              \"\n              [pTooltip]=\"'objectives.selectAnItem' | translate\"\n              tooltipPosition=\"top\"\n              (click)=\"\n                editItemPicker.clickOpen('item', itemIds(), objective.targetId)\n              \"\n            ></button>\n            <lab-picker\n              #editItemPicker\n              [header]=\"'objectives.selectAnItem' | translate\"\n              (selectId)=\"setTarget(objective.id, $event)\"\n            ></lab-picker>\n          }\n          <lab-input-number\n            labNoDrag\n            [pTooltip]=\"\n              objective.type === ObjectiveType.Maximize\n                ? maximizeType() === MaximizeType.Weight\n                  ? ('objectives.valueWeightTooltip' | translate)\n                  : ('objectives.valueRatioTooltip' | translate)\n                : ('objectives.valueTooltip' | translate)\n            \"\n            tooltipPosition=\"top\"\n            [hideButtons]=\"contentSvc.isMobile()\"\n            [value]=\"objective.value\"\n            (setValue)=\"setValue(objective.id, $event)\"\n          ></lab-input-number>\n          @if (objective.type !== ObjectiveType.Maximize) {\n            <p-dropdown\n              labDropdownTranslate\n              labNoDrag\n              [pTooltip]=\"'objectives.unitTooltip' | translate\"\n              tooltipPosition=\"top\"\n              [options]=\"rateUnitOptions()\"\n              [ngModel]=\"objective.unit\"\n              (onChange)=\"\n                changeUnit(\n                  objective,\n                  $event.value,\n                  chooseItemPicker,\n                  chooseRecipePicker\n                )\n              \"\n            ></p-dropdown>\n          }\n          <p-dropdown\n            labDropdownTranslate\n            labNoDrag\n            [pTooltip]=\"'objectives.typeTooltip' | translate\"\n            tooltipPosition=\"top\"\n            [options]=\"objectiveTypeOptions\"\n            [ngModel]=\"objective.type\"\n            (onChange)=\"setType(objective.id, $event.value)\"\n          ></p-dropdown>\n          <button\n            pButton\n            pRipple\n            labNoDrag\n            type=\"button\"\n            class=\"p-button-outlined\"\n            icon=\"fa-solid fa-xmark\"\n            [pTooltip]=\"'objectives.removeTooltip' | translate\"\n            tooltipPosition=\"left\"\n            (click)=\"removeObjective(objective.id)\"\n          ></button>\n        </div>\n      </ng-template>\n    </p-orderList>\n    <div class=\"objectives-buttons d-flex flex-wrap mt-2\">\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        class=\"flex-grow-1 p-button-outlined\"\n        icon=\"fa-solid fa-box\"\n        tooltipPosition=\"top\"\n        [label]=\"'objectives.addItems' | translate\"\n        (click)=\"addItemPicker.clickOpen('item', itemIds())\"\n      ></button>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        class=\"flex-grow-1 p-button-outlined\"\n        icon=\"fa-solid fa-industry\"\n        tooltipPosition=\"top\"\n        [label]=\"'objectives.addMachines' | translate\"\n        (click)=\"addRecipePicker.clickOpen('recipe', recipeIds())\"\n      ></button>\n      <p-dropdown\n        labDropdownTranslate\n        styleClass=\"h-100\"\n        [pTooltip]=\"'objectives.selectDisplayRate' | translate\"\n        [ngModel]=\"dispRateInfo().option\"\n        [options]=\"displayRateOptions\"\n        (onChange)=\"setDisplayRate($event.value, dispRateInfo().option)\"\n      >\n      </p-dropdown>\n      <p-toggleButton\n        [ngModel]=\"paused()\"\n        [onIcon]=\"'fa-solid fa-play'\"\n        offIcon=\"fa-solid fa-pause\"\n        [pTooltip]=\"'objectives.pauseTooltip' | translate\"\n        (onChange)=\"setPaused($event.checked ?? false)\"\n      ></p-toggleButton>\n    </div>\n    @if (result().unboundedRecipeId; as recipeId) {\n      <p-messages severity=\"warn\" styleClass=\"mt-2\">\n        <ng-template pTemplate>\n          <div>\n            <div class=\"d-flex align-items-center\">\n              <span class=\"me-3\">{{\n                'objectives.errorSimplexUnboundedRecipe' | translate\n              }}</span>\n              <i\n                [class]=\"recipeId | iconSmClass: 'recipe'\"\n                [pTooltip]=\"tooltip\"\n              ></i>\n              <span class=\"ms-3\">{{\n                data().recipeEntities[recipeId].name\n              }}</span>\n              <ng-template #tooltip>\n                <lab-tooltip [id]=\"recipeId\" type=\"recipe\"></lab-tooltip>\n              </ng-template>\n            </div>\n            <button\n              type=\"button\"\n              class=\"mt-2 p-button-rounded\"\n              pButton\n              pRipple\n              icon=\"fa-solid fa-plus\"\n              [label]=\"\n                'objectives.errorSimplexUnboundedAddRecipeLimit' | translate\n              \"\n              (click)=\"addRecipeLimit(recipeId)\"\n            ></button>\n          </div>\n        </ng-template>\n      </p-messages>\n    } @else if (messages().length) {\n      <p-messages\n        styleClass=\"mt-2\"\n        [value]=\"messages()\"\n        [closable]=\"false\"\n        [escape]=\"false\"\n      ></p-messages>\n    }\n  </div>\n  <lab-picker\n    #addItemPicker\n    [header]=\"'objectives.selectAnItem' | translate\"\n    (selectId)=\"addItemObjective($event)\"\n  ></lab-picker>\n  <lab-picker\n    #addRecipePicker\n    [header]=\"'objectives.selectARecipe' | translate\"\n    (selectId)=\"addRecipeObjective($event)\"\n  ></lab-picker>\n  <lab-picker\n    #chooseItemPicker\n    [header]=\"'objectives.selectAnItem' | translate\"\n  ></lab-picker>\n  <lab-picker\n    #chooseRecipePicker\n    [header]=\"'objectives.selectARecipe' | translate\"\n  ></lab-picker>\n</p-card>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  ElementRef,\n  EventEmitter,\n  inject,\n  Output,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FilterService } from 'primeng/api';\n\nimport { DialogComponent } from '~/components';\nimport { Game } from '~/models';\nimport { ContentService } from '~/services';\nimport { LabState, Preferences, Recipes } from '~/store';\n\nexport type UnlockStatus = 'available' | 'locked' | 'researched';\n\n@Component({\n  selector: 'lab-tech-picker',\n  templateUrl: './tech-picker.component.html',\n  styleUrls: ['./tech-picker.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TechPickerComponent extends DialogComponent {\n  filterSvc = inject(FilterService);\n  translateSvc = inject(TranslateService);\n  store = inject(Store<LabState>);\n  contentSvc = inject(ContentService);\n\n  filterInput = viewChild.required<ElementRef<HTMLInputElement>>('filterInput');\n\n  @Output() selectIds = new EventEmitter<string[] | null>();\n\n  data = this.store.selectSignal(Recipes.getAdjustedDataset);\n  showTechLabels = this.store.selectSignal(Preferences.getShowTechLabels);\n\n  filter = signal('');\n  selection = signal<string[]>([]);\n\n  allSelected = computed(\n    () => this.selection().length === this.data().technologyIds.length,\n  );\n  status = computed(() => {\n    const data = this.data();\n    const filter = this.filter();\n    let selection = this.selection();\n    const set = new Set(selection);\n    const available: string[] = [];\n    const locked: string[] = [];\n\n    let technologyIds = data.technologyIds;\n    if (filter) {\n      const technologies = technologyIds.map((i) => data.itemEntities[i]);\n      technologyIds = this.filterSvc\n        .filter(technologies, ['name'], filter, 'contains')\n        .map((t) => t.id);\n\n      selection = selection.filter((i) => technologyIds.includes(i));\n    }\n\n    const researched = selection;\n    for (const id of technologyIds) {\n      if (!set.has(id)) {\n        const tech = data.technologyEntities[id];\n\n        if (\n          tech.prerequisites == null ||\n          tech.prerequisites.every((p) => set.has(p))\n        ) {\n          available.push(id);\n        } else {\n          locked.push(id);\n        }\n      }\n    }\n\n    return { available, locked, researched };\n  });\n\n  importVisible = false;\n  importValue = '';\n\n  Game = Game;\n\n  clickOpen(selection: string[] | null): void {\n    selection = [...(selection ?? this.data().technologyIds)];\n    this.selection.set(selection);\n    this.show();\n\n    if (!this.contentSvc.isMobile()) {\n      setTimeout(() => {\n        this.filterInput().nativeElement.focus();\n      });\n    }\n  }\n\n  selectAll(value: boolean): void {\n    this.selection.set(value ? [...this.data().technologyIds] : []);\n  }\n\n  openImport(input: HTMLTextAreaElement): void {\n    this.importVisible = true;\n    this.importValue = '';\n    setTimeout(() => input.focus());\n  }\n\n  copyScriptToClipboard(): void {\n    const script = `/c local list = {}\nfor _, tech in pairs(game.player.force.technologies) do\n    if tech.researched then\n        list[#list + 1] = tech.name\n    end\nend\ngame.write_file(\"techs.txt\", table.concat(list, \",\"))\n`;\n    window.navigator.clipboard.writeText(script);\n    this.contentSvc.showToast$.next({\n      severity: 'success',\n      detail: this.translateSvc.instant('techPicker.exportScriptCopied'),\n      contentStyleClass: 'detail-only',\n    });\n  }\n\n  importTechs(): void {\n    const selection = this.importValue\n      .split(',')\n      .map((v) => v.trim())\n      .map((id) => {\n        if (!id) return '';\n\n        const alt = `${id}-technology`;\n        if (this.data().technologyIds.includes(alt)) {\n          return alt;\n        } else if (this.data().technologyIds.includes(id)) {\n          return id;\n        }\n\n        return '';\n      })\n      .filter((v) => !!v);\n\n    const set = new Set(selection);\n    this.addPrerequisites(set);\n\n    this.selection.set(Array.from(set));\n    this.importValue = '';\n    this.importVisible = false;\n  }\n\n  clickId(id: string): void {\n    const set = new Set(this.selection());\n    if (set.has(id)) {\n      set.delete(id);\n\n      // Filter out any technologies whose prerequisites are no longer met\n      let removeIds: Set<string>;\n      do {\n        removeIds = new Set<string>();\n\n        for (const id of set) {\n          const tech = this.data().technologyEntities[id];\n          if (tech.prerequisites?.some((p) => !set.has(p))) removeIds.add(id);\n        }\n\n        removeIds.forEach((i) => set.delete(i));\n      } while (removeIds.size);\n    } else {\n      set.add(id);\n\n      this.addPrerequisites(set);\n    }\n\n    this.selection.set(Array.from(set));\n  }\n\n  // Add any technologies whose prerequisites were not previously met\n  addPrerequisites(set: Set<string>): void {\n    let addIds: Set<string>;\n    do {\n      addIds = new Set<string>();\n\n      for (const id of set) {\n        const tech = this.data().technologyEntities[id];\n        tech.prerequisites\n          ?.filter((p) => !set.has(p))\n          .forEach((p) => addIds.add(p));\n      }\n\n      addIds.forEach((i) => set.add(i));\n    } while (addIds.size);\n  }\n\n  save(): void {\n    const selection = this.selection();\n    const data = this.data();\n    if (selection.length === data.technologyIds.length)\n      this.selectIds.emit(null);\n\n    /**\n     * Filter for only technologies not listed as prerequisites for other\n     * researched technologies, to create minimal set\n     */\n    const filteredSelection = selection.filter(\n      (a) =>\n        !selection.some((b) => {\n          const techB = data.technologyEntities[b];\n          return techB.prerequisites && techB.prerequisites.indexOf(a) !== -1;\n        }),\n    );\n    this.selectIds.emit(filteredSelection);\n  }\n\n  /** Action Dispatch Methods */\n  setShowTechLabels(value: boolean): void {\n    this.store.dispatch(new Preferences.SetShowTechLabelsAction(value));\n  }\n}\n", "<p-dialog\n  styleClass=\"picker-dialog\"\n  [(visible)]=\"visible\"\n  [modal]=\"true\"\n  [dismissableMask]=\"true\"\n  [draggable]=\"false\"\n  [resizable]=\"false\"\n  [focusOnShow]=\"false\"\n  appendTo=\"body\"\n  [header]=\"'techPicker.header' | translate\"\n  [style]=\"{\n    minHeight: '528px',\n    height: '80vh',\n    width: '50vw'\n  }\"\n  [breakpoints]=\"{ '768px': '80vw', '576px': '100vw' }\"\n  (onHide)=\"onHide()\"\n>\n  <div class=\"d-flex w-100 my-1 p-inputgroup\">\n    <span class=\"p-inputgroup-addon\">\n      <i class=\"fa-solid fa-magnifying-glass\"></i>\n    </span>\n    <input\n      #filterInput\n      pInputText\n      type=\"text\"\n      class=\"w-100\"\n      [ngModel]=\"filter()\"\n      (input)=\"filter.set(filterInput.value)\"\n    />\n    <span class=\"p-inputgroup-addon flex-shrink-0\">\n      <p-checkbox\n        [binary]=\"true\"\n        [label]=\"'techPicker.unlockAll' | translate\"\n        labelStyleClass=\"text-nowrap\"\n        [ngModel]=\"allSelected()\"\n        (onChange)=\"selectAll($event.checked)\"\n      ></p-checkbox>\n    </span>\n    <span class=\"p-inputgroup-addon flex-shrink-0\">\n      <p-checkbox\n        [binary]=\"true\"\n        [label]=\"'techPicker.showLabels' | translate\"\n        labelStyleClass=\"text-nowrap\"\n        [ngModel]=\"showTechLabels()\"\n        (onChange)=\"setShowTechLabels($event.checked)\"\n      ></p-checkbox>\n    </span>\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      class=\"flex-shrink-0\"\n      icon=\"fa-solid fa-file-import\"\n      [label]=\"'techPicker.import' | translate\"\n      [pTooltip]=\"'techPicker.importTooltip' | translate\"\n      (click)=\"openImport(importInput)\"\n    ></button>\n    <p-dialog\n      [(visible)]=\"importVisible\"\n      [modal]=\"true\"\n      [dismissableMask]=\"true\"\n      [draggable]=\"true\"\n      [resizable]=\"false\"\n      appendTo=\"body\"\n      [style]=\"{\n        width: '30vw'\n      }\"\n      [breakpoints]=\"{ '768px': '50vw', '576px': '90vw' }\"\n      [header]=\"'techPicker.importHeader' | translate\"\n    >\n      <div class=\"d-flex flex-column\">\n        @if (data().game === Game.Factorio) {\n          <div class=\"p-inputgroup mb-3\">\n            <span class=\"p-inputgroup-addon\">{{\n              'techPicker.exportFromFactorio' | translate\n            }}</span>\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-copy\"\n              [label]=\"'techPicker.exportCopyScript' | translate\"\n              (click)=\"copyScriptToClipboard()\"\n            ></button>\n            <a\n              href=\"https://mods.factorio.com/mod/export-researched-technologies\"\n              target=\"_blank\"\n              pButton\n              pRipple\n              class=\"text-decoration-none p-inputgroup-addon p-button-outlined\"\n              [label]=\"'techPicker.exportUseMod' | translate\"\n              icon=\"fa-solid fa-link\"\n            >\n            </a>\n          </div>\n        }\n        <div>{{ 'techPicker.importInstructions' | translate }}</div>\n        <textarea\n          #importInput\n          class=\"mt-2 w-100\"\n          rows=\"10\"\n          pInputTextarea\n          [(ngModel)]=\"importValue\"\n          (keydown.enter)=\"importTechs()\"\n        ></textarea>\n      </div>\n      <ng-template pTemplate=\"footer\">\n        <button\n          pButton\n          pRipple\n          type=\"button\"\n          class=\"p-button-outlined\"\n          icon=\"fa-solid fa-check\"\n          [label]=\"'ok' | translate\"\n          (click)=\"importTechs()\"\n        ></button>\n        <button\n          pButton\n          pRipple\n          type=\"button\"\n          class=\"p-button-outlined p-button-secondary\"\n          icon=\"fa-solid fa-xmark\"\n          [label]=\"'cancel' | translate\"\n          (click)=\"importVisible = false\"\n        ></button>\n      </ng-template>\n    </p-dialog>\n  </div>\n\n  @if (visible) {\n    <p-scrollPanel\n      [style]=\"{ height: 'calc(80vh - 165px)', minHeight: '363px' }\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          techSet;\n          context: {\n            title: 'techPicker.available',\n            ids: status().available,\n            class: 'p-button-text'\n          }\n        \"\n      ></ng-container>\n      <ng-container\n        *ngTemplateOutlet=\"\n          techSet;\n          context: {\n            title: 'techPicker.locked',\n            ids: status().locked,\n            class: 'p-button-danger'\n          }\n        \"\n      ></ng-container>\n      <ng-container\n        *ngTemplateOutlet=\"\n          techSet;\n          context: {\n            title: 'techPicker.researched',\n            ids: status().researched,\n            class: 'p-button-success'\n          }\n        \"\n      ></ng-container>\n      <ng-template #techSet let-title=\"title\" let-ids=\"ids\" let-class=\"class\">\n        <h3>{{ title | translate }}</h3>\n        <div class=\"d-flex flex-wrap invert\">\n          @if (ids.length === 0) {\n            <i>{{ 'none' | translate }}</i>\n          }\n          @for (id of ids; track id) {\n            <ng-container\n              *ngTemplateOutlet=\"techButton; context: { id, class }\"\n            ></ng-container>\n          }\n        </div>\n      </ng-template>\n      <ng-template #techButton let-id=\"id\" let-class=\"class\"\n        ><button\n          pButton\n          pRipple\n          type=\"button\"\n          class=\"me-1 mb-1\"\n          [class]=\"class\"\n          [label]=\"(showTechLabels() && data().itemEntities[id]?.name) || ''\"\n          [class.hover-active]=\"selection().indexOf(id) === -1\"\n          [icon]=\"id | iconSmClass\"\n          [pTooltip]=\"tooltip\"\n          tooltipPosition=\"bottom\"\n          (click)=\"clickId(id)\"\n        >\n          <ng-template #tooltip>\n            <lab-tooltip [id]=\"id\" type=\"technology\"></lab-tooltip>\n          </ng-template>\n        </button>\n      </ng-template>\n    </p-scrollPanel>\n  }\n\n  <ng-template pTemplate=\"footer\">\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      class=\"p-button-outlined\"\n      icon=\"fa-solid fa-check\"\n      [label]=\"'ok' | translate\"\n      (click)=\"hide()\"\n    ></button>\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      class=\"p-button-outlined p-button-secondary\"\n      icon=\"fa-solid fa-xmark\"\n      [label]=\"'cancel' | translate\"\n      (click)=\"hide(true)\"\n    ></button>\n  </ng-template>\n</p-dialog>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  HostBinding,\n  inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MenuItem } from 'primeng/api';\nimport { first } from 'rxjs';\n\nimport { coalesce } from '~/helpers';\nimport {\n  AdjustedDataset,\n  BeaconSettings,\n  DisplayRate,\n  displayRateOptions,\n  Entities,\n  FuelType,\n  Game,\n  gameInfo,\n  gameOptions,\n  IdValueDefaultPayload,\n  IdValuePayload,\n  InserterCapacity,\n  inserterCapacityOptions,\n  InserterTarget,\n  inserterTargetOptions,\n  ItemId,\n  Language,\n  languageOptions,\n  MachineSettings,\n  MaximizeType,\n  maximizeTypeOptions,\n  ModuleSettings,\n  PowerUnit,\n  powerUnitOptions,\n  Preset,\n  rational,\n  Rational,\n  researchBonusOptions,\n  Theme,\n  themeOptions,\n} from '~/models';\nimport { ContentService, RouterService } from '~/services';\nimport {\n  App,\n  Datasets,\n  Items,\n  LabState,\n  Machines,\n  Preferences,\n  Recipes,\n  Settings,\n} from '~/store';\nimport { BrowserUtility, RecipeUtility } from '~/utilities';\n\n@Component({\n  selector: 'lab-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettingsComponent implements OnInit {\n  contentSvc = inject(ContentService);\n  router = inject(Router);\n  store = inject(Store<LabState>);\n  translateSvc = inject(TranslateService);\n  routerSvc = inject(RouterService);\n\n  @HostBinding('class.active') @Input() active = false;\n  @HostBinding('class.hidden') @Input() hidden = false;\n\n  itemsState = this.store.selectSignal(Items.getItemsState);\n  excludedItemIds = this.store.selectSignal(Items.getExcludedItemIds);\n  recipesState = this.store.selectSignal(Recipes.getRecipesState);\n  excludedRecipeIds = this.store.selectSignal(Recipes.getExcludedRecipeIds);\n  itemIds = this.store.selectSignal(Recipes.getAvailableItems);\n  data = this.store.selectSignal(Recipes.getAdjustedDataset);\n  machinesState = this.store.selectSignal(Machines.getMachinesState);\n  settings = this.store.selectSignal(Settings.getSettings);\n  columnsState = this.store.selectSignal(Settings.getColumnsState);\n  options = this.store.selectSignal(Settings.getOptions);\n  modOptions = this.store.selectSignal(Settings.getModOptions);\n  presetOptions = this.store.selectSignal(Settings.getPresetOptions);\n  researchedTechnologyIds = this.store.selectSignal(\n    Settings.getAllResearchedTechnologyIds,\n  );\n  recipeIds = this.store.selectSignal(Settings.getAvailableRecipes);\n  gameStates = this.store.selectSignal(Settings.getGameStates);\n  savedStates = this.store.selectSignal(Settings.getSavedStates);\n  preferences = this.store.selectSignal(Preferences.preferencesState);\n  modRecord = this.store.selectSignal(Datasets.getModRecord);\n  machineIds = computed(() => [\n    ...coalesce(this.store.selectSignal(Machines.getMachinesState)().ids, []),\n  ]);\n  defaults = this.store.selectSignal(Settings.getDefaults);\n\n  state = '';\n  editValue = '';\n  editState: 'create' | 'edit' | null = null;\n  editStateMenu: MenuItem[] = [\n    {\n      label: this.translateSvc.instant('settings.createSavedState'),\n      icon: 'fa-solid fa-plus',\n      command: (): void => this.openCreateState(),\n    },\n    {\n      label: this.translateSvc.instant('settings.saveSavedState'),\n      icon: 'fa-solid fa-floppy-disk',\n      command: (): void => this.overwriteState(),\n    },\n    {\n      label: this.translateSvc.instant('settings.editSavedState'),\n      icon: 'fa-solid fa-pencil',\n      command: (): void => this.openEditState(),\n    },\n    {\n      label: this.translateSvc.instant('settings.deleteSavedState'),\n      icon: 'fa-solid fa-trash',\n      command: (): void => this.clickDeleteState(),\n    },\n  ];\n  versionsVisible = false;\n\n  displayRateOptions = displayRateOptions;\n  gameOptions = gameOptions;\n  inserterCapacityOptions = inserterCapacityOptions;\n  inserterTargetOptions = inserterTargetOptions;\n  languageOptions = languageOptions;\n  powerUnitOptions = powerUnitOptions;\n  researchSpeedOptions = researchBonusOptions;\n  themeOptions = themeOptions;\n  maximizeTypeOptions = maximizeTypeOptions;\n\n  FuelType = FuelType;\n  Game = Game;\n  ItemId = ItemId;\n  BrowserUtility = BrowserUtility;\n  rational = rational;\n\n  ngOnInit(): void {\n    this.store\n      .select(Settings.getGameStates)\n      .pipe(first())\n      .subscribe((states) => {\n        this.state = coalesce(\n          Object.keys(states).find((s) => states[s] === BrowserUtility.search),\n          '',\n        );\n      });\n  }\n\n  clickResetSettings(): void {\n    this.contentSvc.confirm({\n      icon: 'fa-solid fa-exclamation-triangle',\n      header: this.translateSvc.instant('settings.reset'),\n      message: this.translateSvc.instant('settings.resetWarning'),\n      acceptLabel: this.translateSvc.instant('yes'),\n      rejectLabel: this.translateSvc.instant('cancel'),\n      accept: () => {\n        localStorage.clear();\n        this.resetSettings();\n      },\n    });\n  }\n\n  setSearch(search: string): void {\n    const tree = this.router.parseUrl(this.router.url);\n    const params = new URLSearchParams(search);\n    params.forEach((value, key) => (tree.queryParams[key] = value));\n    this.router.navigateByUrl(tree);\n  }\n\n  copySearchToClipboard(search: string): void {\n    navigator.clipboard.writeText(search);\n  }\n\n  setState(id: string, states: Entities<string>): void {\n    const query = states[id];\n    if (query) {\n      const queryParams = this.routerSvc.getParams(query);\n      this.state = id;\n      this.router.navigate([], { queryParams });\n    }\n  }\n\n  clickSaveState(game: Game): void {\n    if (!this.editValue || !this.editState) return;\n\n    this.saveState(game, this.editValue, BrowserUtility.search);\n\n    if (this.editState === 'edit' && this.state) {\n      this.removeState(game, this.state);\n    }\n\n    this.editState = null;\n    this.state = this.editValue;\n  }\n\n  openCreateState(): void {\n    this.editValue = '';\n    this.editState = 'create';\n  }\n\n  overwriteState(): void {\n    this.store\n      .select(Settings.getGame)\n      .pipe(first())\n      .subscribe((game) => {\n        this.saveState(game, this.state, BrowserUtility.search);\n      });\n  }\n\n  openEditState(): void {\n    this.editValue = this.state;\n    this.editState = 'edit';\n  }\n\n  clickDeleteState(): void {\n    this.store\n      .select(Settings.getGame)\n      .pipe(first())\n      .subscribe((game) => {\n        this.removeState(game, this.state);\n        this.state = '';\n      });\n  }\n\n  setGame(game: Game): void {\n    this.setMod(gameInfo[game].modId);\n  }\n\n  setExcludedRecipes(\n    checked: string[],\n    recipesState: Recipes.RecipesState,\n    data: AdjustedDataset,\n  ): void {\n    const payload: IdValueDefaultPayload<boolean>[] = [];\n    for (const id of data.recipeIds) {\n      const value = checked.some((i) => i === id);\n      if (value !== recipesState[id].excluded) {\n        // Needs to change, find default value\n        const def = coalesce(data.defaults?.excludedRecipeIds, []).some(\n          (i) => i === id,\n        );\n        payload.push({ id, value, def });\n      }\n    }\n    this.setRecipeExcludedBatch(payload);\n  }\n\n  setExcludedItems(\n    checked: string[],\n    itemsState: Items.ItemsState,\n    data: AdjustedDataset,\n  ): void {\n    const payload: IdValuePayload<boolean>[] = [];\n    for (const id of data.itemIds) {\n      const value = checked.some((i) => i === id);\n      if (value !== itemsState[id].excluded) {\n        payload.push({ id, value });\n      }\n    }\n    this.setItemExcludedBatch(payload);\n  }\n\n  changeFuel(\n    id: string,\n    value: string,\n    settings: MachineSettings,\n    fuelRankIds: string[],\n  ): void {\n    const def = RecipeUtility.bestMatch(\n      coalesce(\n        settings.fuelOptions?.map((o) => o.value),\n        [],\n      ),\n      fuelRankIds,\n    );\n    this.setFuel(id, value, def);\n  }\n\n  changeModules(id: string, value: ModuleSettings[]): void {\n    const state = this.machinesState();\n    const machine = this.data().machineEntities[id];\n    this.setModules(\n      id,\n      RecipeUtility.dehydrateModules(\n        value,\n        coalesce(state.entities[id].moduleOptions, []),\n        state.moduleRankIds,\n        machine.modules,\n      ),\n    );\n  }\n\n  changeBeacons(id: string, value: BeaconSettings[]): void {\n    const def = this.machinesState().beacons;\n    this.setBeacons(id, RecipeUtility.dehydrateBeacons(value, def));\n  }\n\n  changeDefaultBeacons(value: BeaconSettings[]): void {\n    const def = this.defaults()?.beacons;\n    this.setDefaultBeacons(RecipeUtility.dehydrateBeacons(value, def));\n  }\n\n  toggleBeaconReceivers(value: boolean): void {\n    this.setBeaconReceivers(value ? rational(1n) : null);\n  }\n\n  /** Action Dispatch Methods */\n  resetSettings(): void {\n    this.store.dispatch(new App.ResetAction());\n  }\n\n  saveState(key: Game, id: string, value: string): void {\n    this.store.dispatch(new Preferences.SaveStateAction({ key, id, value }));\n  }\n\n  removeState(key: Game, id: string): void {\n    this.store.dispatch(new Preferences.RemoveStateAction({ key, id }));\n  }\n\n  setMod(value: string): void {\n    this.store.dispatch(new Settings.SetModAction(value));\n  }\n\n  setResearchedTechnologies(value: string[] | null): void {\n    this.store.dispatch(new Settings.SetResearchedTechnologiesAction(value));\n  }\n\n  setRecipeExcludedBatch(payload: IdValueDefaultPayload<boolean>[]): void {\n    this.store.dispatch(new Recipes.SetExcludedBatchAction(payload));\n  }\n\n  setItemExcludedBatch(payload: IdValuePayload<boolean>[]): void {\n    this.store.dispatch(new Items.SetExcludedBatchAction(payload));\n  }\n\n  setPreset(value: Preset): void {\n    this.store.dispatch(new Settings.SetPresetAction(value));\n  }\n\n  setFuelRank(value: string[], def: string[] | undefined): void {\n    this.store.dispatch(new Machines.SetFuelRankAction({ value, def }));\n  }\n\n  setModuleRank(value: string[], def: string[] | undefined): void {\n    this.store.dispatch(new Machines.SetModuleRankAction({ value, def }));\n  }\n\n  addMachine(value: string, def: string[] | undefined): void {\n    this.store.dispatch(new Machines.AddAction({ value, def }));\n  }\n\n  setDefaultBeacons(value: BeaconSettings[] | undefined): void {\n    this.store.dispatch(new Machines.SetDefaultBeaconsAction(value));\n  }\n\n  setDefaultOverclock(value: Rational | undefined): void {\n    this.store.dispatch(new Machines.SetDefaultOverclockAction(value));\n  }\n\n  setMachineRank(value: string[], def: string[] | undefined): void {\n    this.store.dispatch(new Machines.SetRankAction({ value, def }));\n  }\n\n  setMachine(id: string, value: string, def: string[] | undefined): void {\n    this.store.dispatch(new Machines.SetMachineAction({ id, value, def }));\n  }\n\n  setFuel(id: string, value: string, def: string | undefined): void {\n    this.store.dispatch(new Machines.SetFuelAction({ id, value, def }));\n  }\n\n  setModules(id: string, value: ModuleSettings[] | undefined): void {\n    this.store.dispatch(new Machines.SetModulesAction({ id, value }));\n  }\n\n  setBeacons(id: string, value: BeaconSettings[] | undefined): void {\n    this.store.dispatch(new Machines.SetBeaconsAction({ id, value }));\n  }\n\n  setOverclock(id: string, value: Rational, def: Rational | undefined): void {\n    this.store.dispatch(new Machines.SetOverclockAction({ id, value, def }));\n  }\n\n  removeMachine(value: string, def: string[] | undefined): void {\n    this.store.dispatch(new Machines.RemoveAction({ value, def }));\n  }\n\n  setBeaconReceivers(value: Rational | null): void {\n    this.store.dispatch(new Settings.SetBeaconReceiversAction(value));\n  }\n\n  setProliferatorSpray(value: string): void {\n    this.store.dispatch(new Settings.SetProliferatorSprayAction(value));\n  }\n\n  setBelt(value: string, def: string | undefined): void {\n    this.store.dispatch(new Settings.SetBeltAction({ value, def }));\n  }\n\n  setPipe(value: string, def: string | undefined): void {\n    this.store.dispatch(new Settings.SetPipeAction({ value, def }));\n  }\n\n  setCargoWagon(value: string, def: string | undefined): void {\n    this.store.dispatch(new Settings.SetCargoWagonAction({ value, def }));\n  }\n\n  setFluidWagon(value: string, def: string | undefined): void {\n    this.store.dispatch(new Settings.SetFluidWagonAction({ value, def }));\n  }\n\n  setFlowRate(value: Rational): void {\n    this.store.dispatch(new Settings.SetFlowRateAction(value));\n  }\n\n  setInserterTarget(value: InserterTarget): void {\n    this.store.dispatch(new Settings.SetInserterTargetAction(value));\n  }\n\n  setMiningBonus(value: Rational): void {\n    this.store.dispatch(new Settings.SetMiningBonusAction(value));\n  }\n\n  setResearchSpeed(value: Rational): void {\n    this.store.dispatch(new Settings.SetResearchBonusAction(value));\n  }\n\n  setInserterCapacity(value: InserterCapacity): void {\n    this.store.dispatch(new Settings.SetInserterCapacityAction(value));\n  }\n\n  setDisplayRate(value: DisplayRate, prev: DisplayRate): void {\n    this.store.dispatch(new Settings.SetDisplayRateAction({ value, prev }));\n  }\n\n  setPowerUnit(value: PowerUnit): void {\n    this.store.dispatch(new Preferences.SetPowerUnitAction(value));\n  }\n\n  setLanguage(value: Language): void {\n    this.translateSvc.use(value);\n    this.store.dispatch(new Preferences.SetLanguageAction(value));\n  }\n\n  setTheme(value: Theme): void {\n    this.store.dispatch(new Preferences.SetThemeAction(value));\n  }\n\n  setBypassLanding(value: boolean): void {\n    this.store.dispatch(new Preferences.SetBypassLandingAction(value));\n  }\n\n  setHideDuplicateIcons(value: boolean): void {\n    this.store.dispatch(new Preferences.SetHideDuplicateIconsAction(value));\n  }\n\n  setDisablePaginator(value: boolean): void {\n    this.store.dispatch(new Preferences.SetDisablePaginatorAction(value));\n  }\n\n  setMaximizeType(value: MaximizeType): void {\n    this.store.dispatch(new Settings.SetMaximizeTypeAction(value));\n  }\n\n  setNetProductionOnly(value: boolean): void {\n    this.store.dispatch(new Settings.SetNetProductionOnlyAction(value));\n  }\n\n  setSurplusMachinesOutput(value: boolean): void {\n    this.store.dispatch(new Settings.SetSurplusMachinesOutputAction(value));\n  }\n\n  setConvertObjectiveValues(value: boolean): void {\n    this.store.dispatch(new Preferences.SetConvertObjectiveValuesAction(value));\n  }\n}\n", "<div class=\"p-3\">\n  <div class=\"d-flex align-items-center justify-content-between\">\n    <h2>{{ 'settings.header' | translate }}</h2>\n    <div>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        class=\"p-button-rounded p-button-text\"\n        icon=\"fa-solid fa-trash\"\n        [pTooltip]=\"'settings.reset' | translate\"\n        tooltipPosition=\"bottom\"\n        (click)=\"clickResetSettings()\"\n      ></button>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        class=\"p-button-rounded p-button-text d-inline-flex d-none d-xl-inline-flex\"\n        icon=\"fa-solid fa-xmark\"\n        (click)=\"contentSvc.toggleSettingsXl()\"\n      ></button>\n      <button\n        pButton\n        pRipple\n        type=\"button\"\n        class=\"p-button-rounded p-button-text d-inline-flex d-sm-none\"\n        icon=\"fa-solid fa-xmark\"\n        (click)=\"contentSvc.toggleSettings()\"\n      ></button>\n    </div>\n  </div>\n</div>\n<div class=\"flex-grow-1 overflow-hidden\">\n  <p-scrollPanel styleClass=\"mb-5\" [style]=\"{ height: '100%' }\">\n    <p-accordion [multiple]=\"true\">\n      <p-accordionTab>\n        <ng-template pTemplate=\"header\">\n          <div\n            class=\"d-flex align-items-center justify-content-between flex-grow-1\"\n          >\n            <div>{{ 'settings.savedStates' | translate }}</div>\n            @if (state) {\n              <div>{{ state }}</div>\n            }\n          </div>\n        </ng-template>\n        @if (BrowserUtility.isStandalone) {\n          <div class=\"p-inputgroup mb-2\">\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-arrow-up-right-from-square\"\n              (click)=\"setSearch(search.value)\"\n            ></button>\n            <input\n              #search\n              pInputText\n              type=\"text\"\n              [ngModel]=\"BrowserUtility.search\"\n            />\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-copy\"\n              (click)=\"copySearchToClipboard(search.value)\"\n            ></button>\n          </div>\n        }\n        @if (editState) {\n          <div class=\"p-inputgroup mb-2\">\n            <input\n              #nameCtrl=\"ngModel\"\n              pInputText\n              pAutoFocus\n              [autofocus]=\"true\"\n              type=\"text\"\n              [placeholder]=\"'settings.nameSavedState' | translate\"\n              [pTooltip]=\"'settings.nameSavedState' | translate\"\n              tooltipPosition=\"top\"\n              required\n              [(ngModel)]=\"editValue\"\n              (keydown.enter)=\"clickSaveState(data().game)\"\n            />\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-floppy-disk\"\n              [pTooltip]=\"'settings.saveState' | translate\"\n              tooltipPosition=\"top\"\n              [disabled]=\"nameCtrl.invalid\"\n              (click)=\"clickSaveState(data().game)\"\n            ></button>\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-outlined\"\n              icon=\"fa-solid fa-xmark\"\n              [pTooltip]=\"'cancel' | translate\"\n              (click)=\"editState = null\"\n            ></button>\n          </div>\n        } @else if (savedStates().length) {\n          <div class=\"p-inputgroup\">\n            <p-dropdown\n              [placeholder]=\"'settings.selectSavedState' | translate\"\n              [pTooltip]=\"'settings.selectSavedState' | translate\"\n              tooltipPosition=\"top\"\n              [ngModel]=\"state\"\n              [options]=\"savedStates()\"\n              (onChange)=\"setState($event.value, gameStates())\"\n            ></p-dropdown>\n            @if (state) {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"p-button-outlined\"\n                icon=\"fa-solid fa-ellipsis-vertical\"\n                (click)=\"stateMenu.toggle($event)\"\n              >\n                <p-menu\n                  #stateMenu\n                  appendTo=\"body\"\n                  [popup]=\"true\"\n                  [model]=\"editStateMenu\"\n                >\n                </p-menu>\n              </button>\n            } @else {\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                class=\"p-button-outlined\"\n                icon=\"fa-solid fa-plus\"\n                [pTooltip]=\"'settings.createSavedState' | translate\"\n                (click)=\"openCreateState()\"\n              ></button>\n            }\n          </div>\n        } @else {\n          <button\n            pButton\n            pRipple\n            type=\"button\"\n            icon=\"fa-solid fa-plus\"\n            class=\"p-button-outlined p-button-rounded w-100\"\n            [label]=\"'settings.createSavedState' | translate\"\n            (click)=\"openCreateState()\"\n          ></button>\n        }\n      </p-accordionTab>\n      <p-accordionTab>\n        <ng-template pTemplate=\"header\">\n          <div\n            class=\"d-flex align-items-center justify-content-between flex-grow-1\"\n          >\n            <div>{{ 'settings.game' | translate }}</div>\n            <div>{{ modRecord()[settings().modId]?.id }}</div>\n          </div>\n        </ng-template>\n        <div class=\"p-fluid\">\n          <div class=\"mt-3\" [class.pb-3]=\"data().game === Game.Factorio\">\n            <span class=\"p-float-label\">\n              <p-dropdown\n                labDropdownTranslate\n                inputId=\"game\"\n                [pTooltip]=\"'settings.gameTooltip' | translate\"\n                [ngModel]=\"data().game\"\n                [options]=\"gameOptions\"\n                (onChange)=\"setGame($event.value)\"\n              >\n              </p-dropdown>\n              <label for=\"game\">{{ 'settings.game' | translate }}</label>\n              @if (data().game !== Game.Factorio) {\n                @for (mod of data().version | keyvalue; track mod.key) {\n                  <small class=\"position-absolute end-0 bottom-100 me-1 mb-1\">\n                    {{ mod.value }}\n                  </small>\n                }\n              }\n            </span>\n          </div>\n          @if (data().game === Game.Factorio) {\n            <div class=\"position-relative\">\n              <label class=\"p-static-label\">{{\n                'settings.modSet' | translate\n              }}</label>\n              <small class=\"position-absolute end-0 top-0 me-1 mb-1\">\n                <a\n                  href=\"https://github.com/factoriolab/factoriolab/issues/new?assignees=&labels=mod+support&template=mod-request.md&title=\"\n                  target=\"_blank\"\n                  >{{ 'settings.requestMod' | translate }}</a\n                >\n              </small>\n              <span class=\"p-inputgroup\">\n                <p-dropdown\n                  inputId=\"mod\"\n                  styleClass=\"w-100\"\n                  [filter]=\"true\"\n                  [autofocusFilter]=\"!contentSvc.isMobile()\"\n                  [pTooltip]=\"'settings.modSetTooltip' | translate\"\n                  [ngModel]=\"settings().modId\"\n                  [options]=\"modOptions()\"\n                  (onChange)=\"setMod($event.value)\"\n                >\n                </p-dropdown>\n                <button\n                  pButton\n                  pRipple\n                  icon=\"fa-solid fa-info\"\n                  class=\"p-button-outlined\"\n                  [pTooltip]=\"'settings.modVersions' | translate\"\n                  (click)=\"versionsVisible = true\"\n                >\n                  <p-dialog\n                    [(visible)]=\"versionsVisible\"\n                    appendTo=\"body\"\n                    [modal]=\"true\"\n                    [dismissableMask]=\"true\"\n                    [draggable]=\"false\"\n                    [resizable]=\"false\"\n                    [style]=\"{ width: '400px', maxHeight: '500px' }\"\n                    [breakpoints]=\"{ '400px': '100vw' }\"\n                    [header]=\"'settings.modVersions' | translate\"\n                  >\n                    <p-table\n                      responsiveLayout=\"scroll\"\n                      styleClass=\"p-datatable-sm\"\n                      [value]=\"data().version | keyvalue\"\n                    >\n                      <ng-template pTemplate=\"header\">\n                        <tr>\n                          <th>{{ 'settings.mod' | translate }}</th>\n                          <th>{{ 'settings.version' | translate }}</th>\n                        </tr>\n                      </ng-template>\n                      <ng-template pTemplate=\"body\" let-mod>\n                        <tr>\n                          <td>{{ mod.key }}</td>\n                          <td>{{ mod.value }}</td>\n                        </tr>\n                      </ng-template>\n                    </p-table>\n                    <ng-template pTemplate=\"footer\">\n                      <button\n                        pButton\n                        pRipple\n                        type=\"button\"\n                        class=\"p-button-outlined\"\n                        icon=\"fa-solid fa-check\"\n                        [label]=\"'ok' | translate\"\n                        (click)=\"versionsVisible = false\"\n                      ></button>\n                    </ng-template>\n                  </p-dialog>\n                </button>\n              </span>\n            </div>\n          }\n          <div class=\"mt-3 pb-3\">\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-rounded p-button-outlined\"\n              icon=\"fa-solid fa-microchip\"\n              [pTooltip]=\"'settings.techsTooltip' | translate\"\n              [label]=\"\n                researchedTechnologyIds()\n                  ? ('settings.techsResearched'\n                    | translate\n                      : {\n                          count: researchedTechnologyIds()!.length\n                        })\n                  : ('settings.allTechsResearched' | translate)\n              \"\n              (click)=\"techPicker.clickOpen(researchedTechnologyIds())\"\n            ></button>\n            <lab-tech-picker\n              #techPicker\n              (selectIds)=\"setResearchedTechnologies($event)\"\n            ></lab-tech-picker>\n          </div>\n          <div class=\"pb-3\">\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-rounded p-button-outlined\"\n              icon=\"fa-solid fa-flask-vial\"\n              [pTooltip]=\"'settings.recipesTooltip' | translate\"\n              [label]=\"\n                'settings.recipesExcluded'\n                  | translate\n                    : {\n                        count: excludedRecipeIds().length\n                      }\n              \"\n              (click)=\"\n                recipesPicker.clickOpen(\n                  'recipe',\n                  recipeIds(),\n                  excludedRecipeIds()\n                )\n              \"\n            ></button>\n            <lab-picker\n              #recipesPicker\n              [header]=\"'settings.recipesHeader' | translate\"\n              (selectIds)=\"setExcludedRecipes($event, recipesState(), data())\"\n            ></lab-picker>\n          </div>\n          <div>\n            <button\n              pButton\n              pRipple\n              type=\"button\"\n              class=\"p-button-rounded p-button-outlined\"\n              icon=\"fa-solid fa-boxes-stacked\"\n              [pTooltip]=\"'settings.itemsTooltip' | translate\"\n              [label]=\"\n                'settings.itemsExcluded'\n                  | translate\n                    : {\n                        count: excludedItemIds().length\n                      }\n              \"\n              (click)=\"\n                itemsPicker.clickOpen('item', itemIds(), excludedItemIds())\n              \"\n            ></button>\n            <lab-picker\n              #itemsPicker\n              [header]=\"'settings.itemsHeader' | translate\"\n              (selectIds)=\"setExcludedItems($event, itemsState(), data())\"\n            ></lab-picker>\n          </div>\n        </div>\n      </p-accordionTab>\n      <p-accordionTab [selected]=\"true\">\n        <ng-template pTemplate=\"header\">\n          <div\n            class=\"d-flex align-items-center justify-content-between flex-grow-1\"\n          >\n            <div>{{ 'settings.factory' | translate }}</div>\n            @if (presetDropdown.label(); as label) {\n              <div>{{ label | translate }}</div>\n            }\n          </div>\n        </ng-template>\n        <div class=\"p-fluid\">\n          <div class=\"mt-3 pb-3\">\n            <span class=\"p-float-label\">\n              <p-dropdown\n                #presetDropdown\n                labDropdownTranslate\n                inputId=\"preset\"\n                [pTooltip]=\"'settings.presetTooltip' | translate\"\n                [ngModel]=\"settings().preset\"\n                [options]=\"presetOptions()\"\n                (onChange)=\"setPreset($event.value)\"\n              >\n              </p-dropdown>\n              <label for=\"preset\">{{ 'settings.preset' | translate }}</label>\n            </span>\n          </div>\n          @if (data().moduleIds.length > 1) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-multiSelect\n                  inputId=\"modifier-rank\"\n                  styleClass=\"icons\"\n                  appendTo=\"body\"\n                  scrollHeight=\"40vh\"\n                  panelStyleClass=\"tooltip\"\n                  [pTooltip]=\"'settings.modifierRankTooltip' | translate\"\n                  [ngModel]=\"machinesState().moduleRankIds\"\n                  [options]=\"options().modules\"\n                  (onChange)=\"\n                    setModuleRank($event.value, data().defaults?.moduleRankIds)\n                  \"\n                >\n                  <ng-template pTemplate=\"selectedItems\" let-items>\n                    <div class=\"d-flex\">\n                      @for (item of items; track item; let i = $index) {\n                        <i class=\"mx-2\" [class]=\"item | iconSmClass\"></i>\n                      }\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center p-2 w-100 h-100\"\n                      [pTooltip]=\"tooltip\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"fuel\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-multiSelect>\n                <label for=\"modifier-rank\">{{\n                  'settings.modifierRank' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().fuelIds.length && data().game !== Game.Satisfactory) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-multiSelect\n                  inputId=\"fuel-rank\"\n                  styleClass=\"icons\"\n                  appendTo=\"body\"\n                  scrollHeight=\"40vh\"\n                  panelStyleClass=\"tooltip\"\n                  [pTooltip]=\"'settings.fuelRankTooltip' | translate\"\n                  [ngModel]=\"machinesState().fuelRankIds\"\n                  [options]=\"options().fuels\"\n                  (onChange)=\"\n                    setFuelRank($event.value, data().defaults?.fuelRankIds)\n                  \"\n                >\n                  <ng-template pTemplate=\"selectedItems\" let-items>\n                    <div class=\"d-flex\">\n                      @for (item of items; track item; let i = $index) {\n                        <i class=\"mx-2\" [class]=\"item | iconSmClass\"></i>\n                      }\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center p-2 w-100 h-100\"\n                      [pTooltip]=\"tooltip\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"fuel\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-multiSelect>\n                <label for=\"fuel-rank\">{{\n                  'settings.fuelRank' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().game !== Game.CaptainOfIndustry) {\n            <div class=\"p-inputgroup flex-wrap machine-preference mb-1\">\n              <span\n                class=\"p-inputgroup-addon\"\n                [pTooltip]=\"'settings.machineDefaults' | translate\"\n              >\n                <i class=\"fa-solid fa-industry\"></i>\n              </span>\n              <p-dropdown\n                labDropdownBase=\"icon\"\n                [class.invisible]=\"!options().machines.length\"\n                [ngModel]=\"options().machines[0]?.value\"\n                [pTooltip]=\"'settings.addMachineTooltip' | translate\"\n                [options]=\"options().machines | filterOptions: machineIds()\"\n                (onChange)=\"\n                  addMachine($event.value, data().defaults?.machineRankIds)\n                \"\n              >\n                <ng-template pTemplate=\"selectedItem\" let-item>\n                  <div\n                    class=\"d-flex align-items-center justify-content-center h-100\"\n                  >\n                    <i class=\"fa-solid fa-plus\"></i>\n                  </div>\n                </ng-template>\n                <ng-template pTemplate=\"item\" let-item>\n                  <div\n                    class=\"d-flex align-items-center py-2 w-100 h-100\"\n                    [pTooltip]=\"tooltip\"\n                  >\n                    <i [class]=\"item.value | iconSmClass\"></i>\n                    <div class=\"ms-3 text-truncate\">\n                      {{ item.label }}\n                    </div>\n                    <ng-template #tooltip>\n                      <lab-tooltip\n                        [id]=\"item.value\"\n                        type=\"machine\"\n                      ></lab-tooltip>\n                    </ng-template>\n                  </div>\n                </ng-template>\n              </p-dropdown>\n              @if (data().game === Game.Satisfactory) {\n                <p-inputNumber\n                  #overclockInput\n                  labNoDrag\n                  suffix=\"%\"\n                  [min]=\"1\"\n                  [max]=\"250\"\n                  [step]=\"10\"\n                  [maxFractionDigits]=\"2\"\n                  [showButtons]=\"true\"\n                  incrementButtonClass=\"p-button-outlined\"\n                  decrementButtonClass=\"p-button-outlined\"\n                  inputStyleClass=\"text-end\"\n                  [pTooltip]=\"'settings.overclockTooltip' | translate\"\n                  [ngModel]=\"machinesState().overclock?.toNumber()\"\n                  (onBlur)=\"\n                    setDefaultOverclock(rational(overclockInput.value ?? 100))\n                  \"\n                >\n                </p-inputNumber>\n              }\n              @if (\n                data().game === Game.Factorio && machinesState().beacons;\n                as beacons\n              ) {\n                <button\n                  pButton\n                  pRipple\n                  type=\"button\"\n                  class=\"hover-action icons p-button-text flex-column\"\n                  [pTooltip]=\"tooltip\"\n                  (click)=\"beaconsOverlay.show($event, beacons)\"\n                >\n                  @for (beacon of beacons; track $index) {\n                    <div class=\"d-flex\">\n                      <i class=\"p-button-icon\" [class]=\"beacon.id | iconSmClass\"\n                        ><span>{{ beacon.count }}</span></i\n                      >\n                      @for (module of beacon.modules; track module.id) {\n                        <i\n                          class=\"p-button-icon\"\n                          [class]=\"module.id | iconSmClass\"\n                          ><span>{{ module.count }}</span></i\n                        >\n                      }\n                    </div>\n                  }\n                  <i class=\"hover-icon fa-solid fa-gear\"></i>\n                </button>\n                <lab-beacons-overlay\n                  #beaconsOverlay\n                  (setValue)=\"changeDefaultBeacons($event)\"\n                ></lab-beacons-overlay>\n                <ng-template #tooltip>\n                  @if (beacons?.[0]?.id; as beaconId) {\n                    <lab-tooltip [id]=\"beaconId\" type=\"beacon\"></lab-tooltip>\n                  }\n                </ng-template>\n              }\n            </div>\n            <p-orderList\n              [value]=\"machineIds()\"\n              [dragdrop]=\"true\"\n              (onReorder)=\"\n                setMachineRank(machineIds(), data().defaults?.machineRankIds)\n              \"\n            >\n              <ng-template pTemplate=\"item\" let-machineId>\n                @if (machinesState().entities[machineId]; as settings) {\n                  @if (data().machineEntities[machineId]; as machine) {\n                    <div class=\"p-inputgroup flex-wrap machine-preference\">\n                      <button\n                        pButton\n                        pRipple\n                        type=\"button\"\n                        class=\"p-button-outlined cursor-grab\"\n                        icon=\"fa-solid fa-grip-lines\"\n                      ></button>\n                      <p-dropdown\n                        labDropdownBase=\"icon\"\n                        labNoDrag\n                        [pTooltip]=\"'settings.machineTooltip' | translate\"\n                        [ngModel]=\"machineId\"\n                        [options]=\"\n                          options().machines\n                            | filterOptions: machineIds() : machineId\n                        \"\n                        (onChange)=\"\n                          setMachine(\n                            machineId,\n                            $event.value,\n                            data().defaults?.machineRankIds\n                          )\n                        \"\n                      >\n                        <ng-template pTemplate=\"selectedItem\" let-item>\n                          @if (item) {\n                            <div class=\"d-flex\">\n                              <i [class]=\"item.value | iconSmClass\"></i>\n                            </div>\n                          } @else {\n                            <div>{{ machineId }}</div>\n                          }\n                        </ng-template>\n                        <ng-template pTemplate=\"item\" let-item>\n                          <div\n                            class=\"d-flex align-items-center py-2 w-100 h-100\"\n                            [pTooltip]=\"tooltip\"\n                          >\n                            <i [class]=\"item.value | iconSmClass\"></i>\n                            <div class=\"ms-3 text-truncate\">\n                              {{ item.label }}\n                            </div>\n                            <ng-template #tooltip>\n                              <lab-tooltip\n                                [id]=\"item.value\"\n                                type=\"machine\"\n                              ></lab-tooltip>\n                            </ng-template>\n                          </div>\n                        </ng-template>\n                      </p-dropdown>\n                      @if (settings.fuelId) {\n                        <p-dropdown\n                          labDropdownBase=\"icon\"\n                          labNoDrag\n                          [pTooltip]=\"'settings.fuelTooltip' | translate\"\n                          [ngModel]=\"settings.fuelId\"\n                          [options]=\"settings.fuelOptions\"\n                          (onChange)=\"\n                            changeFuel(\n                              machineId,\n                              $event.value,\n                              settings,\n                              machinesState().fuelRankIds\n                            )\n                          \"\n                        >\n                          <ng-template pTemplate=\"selectedItem\" let-item>\n                            <div class=\"d-flex\">\n                              <i [class]=\"item.value | iconSmClass\"></i>\n                            </div>\n                          </ng-template>\n                          <ng-template pTemplate=\"item\" let-item>\n                            <div\n                              class=\"d-flex align-items-center py-2 w-100 h-100\"\n                              [pTooltip]=\"tooltip\"\n                            >\n                              <i [class]=\"item.value | iconSmClass\"></i>\n                              <div class=\"ms-3 text-truncate\">\n                                {{ item.label }}\n                              </div>\n                              <ng-template #tooltip>\n                                <lab-tooltip\n                                  [id]=\"item.value\"\n                                  type=\"fuel\"\n                                ></lab-tooltip>\n                              </ng-template>\n                            </div>\n                          </ng-template>\n                        </p-dropdown>\n                      }\n                      @if (settings.modules && machine.modules) {\n                        @if (\n                          machine.modules !== true && machine.modules?.isOne()\n                        ) {\n                          <p-dropdown\n                            labDropdownBase=\"icon\"\n                            labNoDrag\n                            [pTooltip]=\"'settings.modifierTooltip' | translate\"\n                            [ngModel]=\"settings.modules[0].id\"\n                            [options]=\"settings.moduleOptions ?? []\"\n                            (onChange)=\"\n                              changeModules(machineId, [\n                                { id: $event.value, count: rational(1) }\n                              ])\n                            \"\n                          >\n                            <ng-template pTemplate=\"selectedItem\" let-item>\n                              <div class=\"d-flex\">\n                                <i [class]=\"item.value | iconSmClass\"></i>\n                              </div>\n                            </ng-template>\n                            <ng-template pTemplate=\"item\" let-item>\n                              <div\n                                class=\"d-flex align-items-center py-2 w-100 h-100\"\n                                [pTooltip]=\"\n                                  item.value !== 'module' ? tooltip : undefined\n                                \"\n                              >\n                                <i [class]=\"item.value | iconSmClass\"></i>\n                                <div class=\"ms-3 text-truncate\">\n                                  {{ item.label }}\n                                </div>\n                                <ng-template #tooltip>\n                                  <lab-tooltip\n                                    [id]=\"item.value\"\n                                    type=\"module\"\n                                  ></lab-tooltip>\n                                </ng-template>\n                              </div>\n                            </ng-template>\n                          </p-dropdown>\n                        } @else {\n                          <button\n                            pButton\n                            pRipple\n                            type=\"button\"\n                            class=\"hover-action icons p-button-text\"\n                            [pTooltip]=\"tooltip\"\n                            (click)=\"\n                              modulesOverlay.show(\n                                $event,\n                                settings.modules,\n                                machine\n                              )\n                            \"\n                          >\n                            @for (module of settings.modules; track module.id) {\n                              <i\n                                class=\"p-button-icon\"\n                                [class]=\"module.id | iconSmClass\"\n                                ><span>{{ module.count }}</span></i\n                              >\n                            }\n                            <i class=\"hover-icon fa-solid fa-gear\"></i>\n                          </button>\n                          <lab-modules-overlay\n                            #modulesOverlay\n                            (setValue)=\"changeModules(machineId, $event)\"\n                          ></lab-modules-overlay>\n                          <ng-template #tooltip>\n                            @for (module of settings.modules; track module.id) {\n                              @if (module.id) {\n                                <lab-tooltip\n                                  [id]=\"module.id\"\n                                  type=\"module\"\n                                ></lab-tooltip>\n                              }\n                            }\n                          </ng-template>\n                        }\n                      }\n                      <!-- Overclock input -->\n                      @if (data().game === Game.Satisfactory) {\n                        <p-inputNumber\n                          #overclockInput\n                          labNoDrag\n                          suffix=\"%\"\n                          [min]=\"1\"\n                          [max]=\"250\"\n                          [step]=\"10\"\n                          [maxFractionDigits]=\"2\"\n                          [showButtons]=\"true\"\n                          incrementButtonClass=\"p-button-outlined\"\n                          decrementButtonClass=\"p-button-outlined\"\n                          inputStyleClass=\"text-end\"\n                          [pTooltip]=\"'settings.overclockTooltip' | translate\"\n                          [ngModel]=\"settings.overclock?.toNumber()\"\n                          (onBlur)=\"\n                            setOverclock(\n                              machineId,\n                              rational(overclockInput.value ?? 100),\n                              machineId\n                                ? machinesState().entities['']?.overclock\n                                : rational(100)\n                            )\n                          \"\n                        >\n                        </p-inputNumber>\n                      }\n                      @if (settings.beacons && settings.beacons.length) {\n                        <button\n                          pButton\n                          pRipple\n                          type=\"button\"\n                          class=\"hover-action icons p-button-text flex-column\"\n                          [pTooltip]=\"tooltip\"\n                          (click)=\"\n                            beaconsOverlay.show($event, settings.beacons)\n                          \"\n                        >\n                          @for (beacon of settings.beacons; track $index) {\n                            <div class=\"d-flex\">\n                              <i\n                                class=\"p-button-icon\"\n                                [class]=\"beacon.id | iconSmClass\"\n                                ><span>{{ beacon.count }}</span></i\n                              >\n                              @for (module of beacon.modules; track module.id) {\n                                <i\n                                  class=\"p-button-icon\"\n                                  [class]=\"module.id | iconSmClass\"\n                                  ><span>{{ module.count }}</span></i\n                                >\n                              }\n                            </div>\n                          }\n                          <i class=\"hover-icon fa-solid fa-gear\"></i>\n                        </button>\n                        <lab-beacons-overlay\n                          #beaconsOverlay\n                          (setValue)=\"changeBeacons(machineId, $event)\"\n                        ></lab-beacons-overlay>\n                        <ng-template #tooltip>\n                          @if (settings.beacons?.[0]?.id; as beaconId) {\n                            <lab-tooltip\n                              [id]=\"beaconId\"\n                              type=\"beacon\"\n                            ></lab-tooltip>\n                          }\n                        </ng-template>\n                      }\n                      <button\n                        pButton\n                        pRipple\n                        labNoDrag\n                        type=\"button\"\n                        icon=\"fa-solid fa-xmark\"\n                        class=\"p-button-outlined ms-auto\"\n                        [class.invisible]=\"machineId === ''\"\n                        [pTooltip]=\"\n                          'settings.removeMachinePreference' | translate\n                        \"\n                        (click)=\"\n                          removeMachine(\n                            machineId,\n                            data().defaults?.machineRankIds\n                          )\n                        \"\n                      ></button>\n                    </div>\n                  }\n                }\n              </ng-template>\n            </p-orderList>\n            <div class=\"pt-2\"><!--spacer--></div>\n          }\n          @if (data().game === Game.Factorio) {\n            <div class=\"pb-3\">\n              <p-checkbox\n                [ngModel]=\"settings().beaconReceivers != null\"\n                [binary]=\"true\"\n                [label]=\"'settings.estimateBeaconPowerUsage' | translate\"\n                [pTooltip]=\"\n                  'settings.estimateBeaconPowerUsageTooltip' | translate\n                \"\n                tooltipPosition=\"bottom\"\n                (onChange)=\"toggleBeaconReceivers($event.checked)\"\n              ></p-checkbox>\n            </div>\n          }\n          @if (settings().beaconReceivers; as beaconReceivers) {\n            <div class=\"pb-3\">\n              <label class=\"p-static-label\" for=\"beacon-receivers\">{{\n                'settings.averageBeaconReceivers' | translate\n              }}</label>\n              <lab-input-number\n                inputId=\"beacon-receivers\"\n                class=\"w-100\"\n                [pTooltip]=\"\n                  'settings.averageBeaconReceiversTooltip' | translate\n                \"\n                [value]=\"beaconReceivers\"\n                (setValue)=\"setBeaconReceivers($event)\"\n              ></lab-input-number>\n            </div>\n          }\n          @if (data().game === Game.DysonSphereProgram) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownBase\n                  inputId=\"proliferator-self-spray\"\n                  [autoDisplayFirst]=\"false\"\n                  [pTooltip]=\"\n                    'settings.proliferatorSelfSprayTooltip' | translate\n                  \"\n                  [ngModel]=\"settings().proliferatorSprayId\"\n                  [options]=\"options().proliferatorModules\"\n                  (onChange)=\"setProliferatorSpray($event.value)\"\n                >\n                  <ng-template pTemplate=\"selectedItem\" let-item>\n                    <div class=\"d-flex align-items-center h-100\">\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center py-2 w-100 h-100\"\n                      [pTooltip]=\"item.value !== 'module' ? tooltip : undefined\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"module\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-dropdown>\n                <label for=\"proliferator-self-spray\">{{\n                  'settings.proliferatorSelfSpray' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          <div class=\"mt-3 pb-3\">\n            <div class=\"p-float-label\">\n              <p-dropdown\n                labDropdownBase\n                inputId=\"default-transport-belt\"\n                [pTooltip]=\"'settings.defaultTransportBeltTooltip' | translate\"\n                [ngModel]=\"settings().beltId\"\n                [options]=\"options().belts\"\n                (onChange)=\"setBelt($event.value, data().defaults?.beltId)\"\n              >\n                <ng-template pTemplate=\"selectedItem\" let-item>\n                  @if (item) {\n                    <div class=\"d-flex align-items-center h-100\">\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                    </div>\n                  }\n                </ng-template>\n                <ng-template pTemplate=\"item\" let-item>\n                  <div\n                    class=\"d-flex align-items-center py-2 w-100 h-100\"\n                    [pTooltip]=\"tooltip\"\n                  >\n                    <i [class]=\"item.value | iconSmClass\"></i>\n                    <div class=\"ms-3 text-truncate\">\n                      {{ item.label }}\n                    </div>\n                    <ng-template #tooltip>\n                      <lab-tooltip [id]=\"item.value\" type=\"belt\"></lab-tooltip>\n                    </ng-template>\n                  </div>\n                </ng-template>\n              </p-dropdown>\n              <label for=\"default-transport-belt\">{{\n                'settings.defaultTransportBelt' | translate\n              }}</label>\n            </div>\n          </div>\n          @if (data().pipeIds.length > 1) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownBase\n                  inputId=\"default-pipe\"\n                  [pTooltip]=\"'settings.defaultPipeTooltip' | translate\"\n                  [ngModel]=\"settings().pipeId\"\n                  [options]=\"options().pipes\"\n                  (onChange)=\"setPipe($event.value, data().defaults?.pipeId)\"\n                >\n                  <ng-template pTemplate=\"selectedItem\" let-item>\n                    <div class=\"d-flex align-items-center h-100\">\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center py-2 w-100 h-100\"\n                      [pTooltip]=\"tooltip\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"pipe\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-dropdown>\n                <label for=\"default-pipe\">{{\n                  'settings.defaultPipe' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().cargoWagonIds.length > 1) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownBase\n                  inputId=\"default-cargo-wagon\"\n                  [pTooltip]=\"'settings.defaultCargoWagonTooltip' | translate\"\n                  [ngModel]=\"settings().cargoWagonId\"\n                  [options]=\"options().cargoWagons\"\n                  (onChange)=\"\n                    setCargoWagon($event.value, data().defaults?.cargoWagonId)\n                  \"\n                >\n                  <ng-template pTemplate=\"selectedItem\" let-item>\n                    <div class=\"d-flex align-items-center h-100\">\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center py-2 w-100 h-100\"\n                      [pTooltip]=\"tooltip\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"cargo-wagon\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-dropdown>\n                <label for=\"default-cargo-wagon\">{{\n                  'settings.defaultCargoWagon' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().fluidWagonIds.length > 1) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownBase\n                  inputId=\"default-fluid-wagon\"\n                  [pTooltip]=\"'settings.defaultFluidWagonTooltip' | translate\"\n                  [ngModel]=\"settings().fluidWagonId\"\n                  [options]=\"options().fluidWagons\"\n                  (onChange)=\"\n                    setFluidWagon($event.value, data().defaults?.fluidWagonId)\n                  \"\n                >\n                  <ng-template pTemplate=\"selectedItem\" let-item>\n                    <div class=\"d-flex align-items-center h-100\">\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                    </div>\n                  </ng-template>\n                  <ng-template pTemplate=\"item\" let-item>\n                    <div\n                      class=\"d-flex align-items-center py-2 w-100 h-100\"\n                      [pTooltip]=\"tooltip\"\n                    >\n                      <i [class]=\"item.value | iconSmClass\"></i>\n                      <div class=\"ms-3 text-truncate\">\n                        {{ item.label }}\n                      </div>\n                      <ng-template #tooltip>\n                        <lab-tooltip\n                          [id]=\"item.value\"\n                          type=\"fluid-wagon\"\n                        ></lab-tooltip>\n                      </ng-template>\n                    </div>\n                  </ng-template>\n                </p-dropdown>\n                <label for=\"default-fluid-wagon\">{{\n                  'settings.defaultFluidWagon' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().game === Game.Factorio) {\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-inputNumber\n                  #flowRateInput\n                  inputId=\"pipe-flow-rate\"\n                  [suffix]=\"' ' + ('settings.flowRateUnit' | translate)\"\n                  [min]=\"1\"\n                  [step]=\"100\"\n                  [showButtons]=\"true\"\n                  incrementButtonClass=\"p-button-outlined\"\n                  decrementButtonClass=\"p-button-outlined\"\n                  [pTooltip]=\"'settings.pipeFlowRateTooltip' | translate\"\n                  [ngModel]=\"settings().flowRate.toNumber()\"\n                  (onBlur)=\"setFlowRate(rational(flowRateInput.value ?? 1500))\"\n                ></p-inputNumber>\n                <label for=\"pipe-flow-rate\">{{\n                  'settings.pipeFlowRate' | translate\n                }}</label>\n                <small class=\"position-absolute end-0 bottom-100 me-1 mb-1\">\n                  <a\n                    href=\"https://wiki.factorio.com/Fluid_system#Pipelines\"\n                    target=\"_blank\"\n                    >{{ 'settings.wiki' | translate }}</a\n                  >\n                </small>\n              </div>\n            </div>\n            <div class=\"mt-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownTranslate\n                  inputId=\"inserter-target\"\n                  [pTooltip]=\"'settings.inserterTargetTooltip' | translate\"\n                  [ngModel]=\"settings().inserterTarget\"\n                  [options]=\"inserterTargetOptions\"\n                  (onChange)=\"setInserterTarget($event.value)\"\n                >\n                </p-dropdown>\n                <label for=\"inserter-target\">{{\n                  'settings.inserterTarget' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n          @if (data().game === Game.DysonSphereProgram) {\n            <div class=\"mt-3\">\n              <div class=\"p-float-label\">\n                <p-inputNumber\n                  #miningBonusInput\n                  inputId=\"mining-speed\"\n                  suffix=\"%\"\n                  [min]=\"100\"\n                  [step]=\"10\"\n                  [showButtons]=\"true\"\n                  incrementButtonClass=\"p-button-outlined\"\n                  decrementButtonClass=\"p-button-outlined\"\n                  [pTooltip]=\"'settings.miningSpeedTooltip' | translate\"\n                  [ngModel]=\"\n                    settings().miningBonus.add(rational(100)).toNumber()\n                  \"\n                  (onBlur)=\"\n                    setMiningBonus(\n                      rational((miningBonusInput.value ?? 100) - 100)\n                    )\n                  \"\n                ></p-inputNumber>\n                <label for=\"mining-speed\">{{\n                  'settings.miningSpeed' | translate\n                }}</label>\n              </div>\n            </div>\n          }\n        </div>\n      </p-accordionTab>\n      @if (data().game === Game.Factorio) {\n        <p-accordionTab [header]=\"'settings.bonuses' | translate\">\n          <div class=\"p-fluid\">\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-inputNumber\n                  #miningProdInput\n                  inputId=\"mining-productivity\"\n                  prefix=\"+\"\n                  suffix=\"%\"\n                  [min]=\"0\"\n                  [step]=\"10\"\n                  [showButtons]=\"true\"\n                  incrementButtonClass=\"p-button-outlined\"\n                  decrementButtonClass=\"p-button-outlined\"\n                  [pTooltip]=\"'settings.miningProductivityTooltip' | translate\"\n                  [ngModel]=\"settings().miningBonus.toNumber()\"\n                  (onBlur)=\"\n                    setMiningBonus(rational(miningProdInput.value ?? 0))\n                  \"\n                ></p-inputNumber>\n                <label for=\"mining-productivity\">{{\n                  'settings.miningProductivity' | translate\n                }}</label>\n              </div>\n            </div>\n            <div class=\"mt-3 pb-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownTranslate\n                  inputId=\"research-bonus\"\n                  [pTooltip]=\"'settings.researchSpeedTooltip' | translate\"\n                  [ngModel]=\"settings().researchBonus\"\n                  [options]=\"researchSpeedOptions\"\n                  (onChange)=\"setResearchSpeed($event.value)\"\n                >\n                </p-dropdown>\n                <label for=\"research-speed\">{{\n                  'settings.researchSpeed' | translate\n                }}</label>\n              </div>\n            </div>\n            <div class=\"mt-3\">\n              <div class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownTranslate\n                  inputId=\"inserter-capacity\"\n                  [pTooltip]=\"'settings.inserterCapacityTooltip' | translate\"\n                  [ngModel]=\"settings().inserterCapacity\"\n                  [options]=\"inserterCapacityOptions\"\n                  (onChange)=\"setInserterCapacity($event.value)\"\n                >\n                </p-dropdown>\n                <label for=\"inserter-capacity\">{{\n                  'settings.inserterCapacity' | translate\n                }}</label>\n              </div>\n            </div>\n          </div>\n        </p-accordionTab>\n      }\n      <p-accordionTab [header]=\"'settings.display' | translate\">\n        <div class=\"p-fluid\">\n          <!-- <button\n            pButton\n            pRipple\n            type=\"button\"\n            class=\"p-button-rounded p-button-outlined mb-2\"\n            icon=\"fa-solid fa-table-columns\"\n            [label]=\"'settings.openColumnSettings' | translate\"\n            (click)=\"contentSvc.showColumns$.next()\"\n          ></button> -->\n          <div class=\"mt-3 pb-3\">\n            <span class=\"p-float-label\">\n              <p-dropdown\n                labDropdownTranslate\n                inputId=\"display-rate\"\n                [pTooltip]=\"'settings.displayRateTooltip' | translate\"\n                [ngModel]=\"settings().displayRate\"\n                [options]=\"displayRateOptions\"\n                (onChange)=\"\n                  setDisplayRate($event.value, settings().displayRate)\n                \"\n              >\n              </p-dropdown>\n              <label for=\"display-rate\">{{\n                'settings.displayRate' | translate\n              }}</label>\n            </span>\n          </div>\n          @if (columnsState().power.show) {\n            <div class=\"mt-3 pb-3\">\n              <span class=\"p-float-label\">\n                <p-dropdown\n                  labDropdownTranslate\n                  inputId=\"power-unit\"\n                  [pTooltip]=\"'settings.powerUnitTooltip' | translate\"\n                  [ngModel]=\"preferences().powerUnit\"\n                  [options]=\"powerUnitOptions\"\n                  (onChange)=\"setPowerUnit($event.value)\"\n                >\n                </p-dropdown>\n                <label for=\"power-unit\">{{\n                  'settings.powerUnit' | translate\n                }}</label>\n              </span>\n            </div>\n          }\n          <div class=\"mt-3 pb-3\">\n            <div class=\"text-end\"></div>\n            <div class=\"p-float-label\">\n              <p-dropdown\n                labDropdownTranslate\n                inputId=\"language\"\n                [pTooltip]=\"'settings.languageTooltip' | translate\"\n                [ngModel]=\"preferences().language\"\n                [options]=\"languageOptions\"\n                (onChange)=\"setLanguage($event.value)\"\n              >\n              </p-dropdown>\n              <label for=\"language\">{{\n                'settings.language' | translate\n              }}</label>\n              <small class=\"position-absolute end-0 bottom-100 me-1 mb-1\">\n                <a\n                  href=\"https://github.com/factoriolab/factoriolab/wiki/Translating-FactorioLab\"\n                  target=\"_blank\"\n                  >{{ 'settings.helpTranslate' | translate }}</a\n                >\n              </small>\n            </div>\n          </div>\n          <div class=\"mt-3 pb-3\">\n            <div class=\"p-float-label\">\n              <p-dropdown\n                labDropdownTranslate\n                inputId=\"theme\"\n                [pTooltip]=\"'settings.themeTooltip' | translate\"\n                [ngModel]=\"preferences().theme\"\n                [options]=\"themeOptions\"\n                (onChange)=\"setTheme($event.value)\"\n              >\n              </p-dropdown>\n              <label for=\"theme\">{{ 'settings.theme' | translate }}</label>\n            </div>\n          </div>\n          <div class=\"pb-3\">\n            <p-checkbox\n              [binary]=\"true\"\n              [label]=\"'settings.bypassLanding' | translate\"\n              [ngModel]=\"preferences().bypassLanding\"\n              (onChange)=\"setBypassLanding($event.checked)\"\n            ></p-checkbox>\n          </div>\n          <div class=\"pb-3\">\n            <p-checkbox\n              [ngModel]=\"preferences().hideDuplicateIcons\"\n              [binary]=\"true\"\n              [label]=\"'settings.hideDuplicateIcons' | translate\"\n              (onChange)=\"setHideDuplicateIcons($event.checked)\"\n            ></p-checkbox>\n          </div>\n          <div>\n            <p-checkbox\n              [ngModel]=\"preferences().disablePaginator\"\n              [binary]=\"true\"\n              [label]=\"'settings.disablePaginator' | translate\"\n              (onChange)=\"setDisablePaginator($event.checked)\"\n            ></p-checkbox>\n          </div>\n        </div>\n      </p-accordionTab>\n      <p-accordionTab [header]=\"'settings.advanced' | translate\">\n        <div class=\"p-fluid\">\n          <div class=\"mt-3 pb-3\">\n            <span class=\"p-float-label\">\n              <p-dropdown\n                labDropdownTranslate\n                inputId=\"maximize-type\"\n                [pTooltip]=\"'settings.maximizeTypeTooltip' | translate\"\n                [ngModel]=\"settings().maximizeType\"\n                [options]=\"maximizeTypeOptions\"\n                (onChange)=\"setMaximizeType($event.value)\"\n              >\n              </p-dropdown>\n              <label for=\"maximize-type\">{{\n                'settings.maximizeType' | translate\n              }}</label>\n            </span>\n          </div>\n          <div class=\"pb-3\">\n            <p-checkbox\n              [ngModel]=\"settings().netProductionOnly\"\n              [binary]=\"true\"\n              [label]=\"'settings.netProductionOnly' | translate\"\n              [pTooltip]=\"'settings.netProductionOnlyTooltip' | translate\"\n              tooltipPosition=\"top\"\n              (onChange)=\"setNetProductionOnly($event.checked)\"\n            ></p-checkbox>\n          </div>\n          <div class=\"pb-3\">\n            <p-checkbox\n              [ngModel]=\"settings().surplusMachinesOutput\"\n              [binary]=\"true\"\n              [label]=\"'settings.surplusMachinesOutput' | translate\"\n              [pTooltip]=\"'settings.surplusMachinesOutputTooltip' | translate\"\n              tooltipPosition=\"top\"\n              (onChange)=\"setSurplusMachinesOutput($event.checked)\"\n            ></p-checkbox>\n          </div>\n          <div class=\"pb-3\">\n            <p-checkbox\n              [ngModel]=\"preferences().convertObjectiveValues\"\n              [binary]=\"true\"\n              [label]=\"'settings.convertObjectiveValues' | translate\"\n              [pTooltip]=\"'settings.convertObjectiveValuesTooltip' | translate\"\n              tooltipPosition=\"top\"\n              (onChange)=\"setConvertObjectiveValues($event.checked)\"\n            ></p-checkbox>\n          </div>\n          <button\n            pButton\n            pRipple\n            type=\"button\"\n            class=\"p-button-rounded p-button-outlined mb-4\"\n            icon=\"fa-solid fa-dollar-sign\"\n            [label]=\"'settings.openCosts' | translate\"\n            (click)=\"contentSvc.showCosts$.next()\"\n          ></button>\n        </div>\n      </p-accordionTab>\n    </p-accordion>\n  </p-scrollPanel>\n</div>\n", "import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppSharedModule } from '~/app-shared.module';\nimport { components } from './components';\nimport { directives } from './directives';\nimport { pipes } from './pipes';\n\n@NgModule({\n  imports: [FormsModule, AppSharedModule],\n  declarations: [...components, ...directives, ...pipes],\n  exports: [FormsModule, ...components, ...directives, ...pipes],\n})\nexport class MainSharedModule {}\n"],
  "mappings": "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",
  "names": ["num", "_forTrack0", "id", "_c9", "_c5", "_c6", "_c7", "_c8", "filter", "input", "id", "_c1", "_c2", "_c3", "_c4", "_forTrack0", "_c2", "_c3", "_forTrack1", "_c4", "_c0", "_c1"]
}
